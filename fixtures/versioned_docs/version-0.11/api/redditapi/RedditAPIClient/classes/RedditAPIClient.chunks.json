[
  {
    "pageContent": "<path>Class: RedditAPIClient, Accessors, modMail, Get Signature, Returns</path>\n[**@devvit/public-api v0.11.18-dev**](../../README.md)\n# Class: RedditAPIClient\nThe Reddit API Client\nTo use the Reddit API Client, add it to the plugin configuration at the top of the file.\n## Example\n```ts\nDevvit.configure({\n  redditAPI: true,\n  // other plugins\n});\n\n// use within one of our capability handlers e.g. Menu Actions, Triggers, Scheduled Job Type, etc\nasync (event, context) => {\n  const subreddit = await context.reddit.getSubredditById(context.subredditId);\n  context.reddit.submitPost({\n    subredditName: subreddit.name,\n    title: 'test post',\n    text: 'test body',\n  });\n  // additional code\n};\n```\n## Constructors\n### new RedditAPIClient()\n**new RedditAPIClient**(`metadata`): `RedditAPIClient`\n#### Parameters\n##### metadata\n`Metadata`\n#### Returns\n`RedditAPIClient`\n## Accessors\n### modMail\n#### Get Signature\n**get** **modMail**(): [`ModMailService`](../../models/classes/ModMailService.md)\nGet ModMail API object\n##### Example\n```ts\nawait reddit.modMail.reply({\n  body: \"Here is my message\",\n  conversationId: \"abcd42\";\n})\n```\n##### Returns\n[`ModMailService`](../../models/classes/ModMailService.md)",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Accessors",
        "modMail",
        "Get Signature",
        "Returns"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, addWikiContributor()</path>\n## Methods\n### addEditorToWikiPage()\n**addEditorToWikiPage**(`subredditName`, `page`, `username`): `Promise`<`void`\\>\nAdd an editor to a wiki page.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit the wiki is in.\n##### page\n`string`\nThe name of the wiki page to add the editor to.\n##### username\n`string`\nThe username of the user to add as an editor.\n#### Returns\n`Promise`<`void`\\>\n### addModNote()\n**addModNote**(`options`): `Promise`<[`ModNote`](../../models/classes/ModNote.md)\\>\nAdd a mod note.\n#### Parameters\n##### options\n`Prettify`\nOptions for the request\n#### Returns\n`Promise`<[`ModNote`](../../models/classes/ModNote.md)\\>\nA Promise that resolves if the mod note was successfully added.\n### addRemovalNote()\n**addRemovalNote**(`options`): `Promise`<`void`\\>\nAdd a mod note for why a post or comment was removed\n#### Parameters\n##### options\n`Prettify`\n#### Returns\n`Promise`<`void`\\>\n### addSubredditRemovalReason()\n**addSubredditRemovalReason**(`subredditName`, `options`): `Promise`<`string`\\>\nAdd a removal reason to a subreddit\n#### Parameters\n##### subredditName\n`string`\nName of the subreddit being removed.\n##### options\nOptions.\n###### message\n`string`\nThe message associated with the removal reason.\n###### title\n`string`\nThe title of the removal reason.\n#### Returns\n`Promise`<`string`\\>\nRemoval Reason ID\n#### Example\n```ts\nconst newReason = await reddit.addSubredditRemovalReasons('askReddit', {\n  title: 'Spam',\n  message: 'This is spam!',\n});\nconsole.log(newReason.id);\n```\n### addWidget()\n**addWidget**(`widgetData`): `Promise`<[`Widget`](../../models/classes/Widget.md)\\>\nAdd a widget to a subreddit.\n#### Parameters\n##### widgetData\n[`AddWidgetData`](../../models/type-aliases/AddWidgetData.md)\nThe data for the widget to add.\n#### Returns\n`Promise`<[`Widget`](../../models/classes/Widget.md)\\>\n-   The added Widget object.\n### addWikiContributor()\n**addWikiContributor**(`username`, `subredditName`): `Promise`<`void`\\>",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "addWikiContributor()"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\nAdd a user as a wiki contributor for a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to add as a wiki contributor. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to add the user as a wiki contributor. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### approve()\n**approve**(`id`): `Promise`<`void`\\>\nApprove a post or comment.\n#### Parameters\n##### id\n`string`\nThe id of the post (t3\\*) or comment (t1\\*) to approve.\n#### Returns\n`Promise`<`void`\\>\n#### Example\n```ts\nawait reddit.approve('t3_123456');\nawait reddit.approve('t1_123456');\n```\n### approveUser()\n**approveUser**(`username`, `subredditName`): `Promise`<`void`\\>\nApprove a user to post in a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to approve. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to approve the user in. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### banUser()\n**banUser**(`options`): `Promise`<`void`\\>\nBan a user from a subreddit.\n#### Parameters\n##### options\n[`BanUserOptions`](../../models/type-aliases/BanUserOptions.md)\nOptions for the request\n#### Returns\n`Promise`<`void`\\>\n### banWikiContributor()\n**banWikiContributor**(`options`): `Promise`<`void`\\>\nBan a user from contributing to the wiki on a subreddit.\n#### Parameters\n##### options\n[`BanWikiContributorOptions`](../../models/type-aliases/BanWikiContributorOptions.md)\nOptions for the request\n#### Returns\n`Promise`<`void`\\>\n### createPostFlairTemplate()\n**createPostFlairTemplate**(`options`): `Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\>\nCreate a post flair template for a subreddit.\n#### Parameters\n##### options\n[`CreateFlairTemplateOptions`](../../models/type-aliases/CreateFlairTemplateOptions.md)\nOptions for the request\n#### Returns\n`Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\>\nThe created FlairTemplate object.\n### createUserFlairTemplate()",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, deleteWidget(), Parameters</path>\n**createUserFlairTemplate**(`options`): `Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\>\nCreate a user flair template for a subreddit.\n#### Parameters\n##### options\n[`CreateFlairTemplateOptions`](../../models/type-aliases/CreateFlairTemplateOptions.md)\nOptions for the request\n#### Returns\n`Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\>\nThe created FlairTemplate object.\n### createWikiPage()\n**createWikiPage**(`options`): `Promise`<[`WikiPage`](../../models/classes/WikiPage.md)\\>\nCreate a new wiki page for a subreddit.\n#### Parameters\n##### options\n[`CreateWikiPageOptions`](../../models/type-aliases/CreateWikiPageOptions.md)\nOptions for the request\n#### Returns\n`Promise`<[`WikiPage`](../../models/classes/WikiPage.md)\\>\n-   The created WikiPage object.\n### crosspost()\n**crosspost**(`options`): `Promise`<[`Post`](../../models/classes/Post.md)\\>\nCrossposts a post to a subreddit.\n#### Parameters\n##### options\n[`CrosspostOptions`](../../models/type-aliases/CrosspostOptions.md)\nOptions for crossposting a post\n#### Returns\n`Promise`<[`Post`](../../models/classes/Post.md)\\>\n-   A Promise that resolves to a Post object.\n### deleteFlairTemplate()\n**deleteFlairTemplate**(`subredditName`, `flairTemplateId`): `Promise`<`void`\\>\nDelete a flair template from a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to delete the flair template from.\n##### flairTemplateId\n`string`\nThe ID of the flair template to delete.\n#### Returns\n`Promise`<`void`\\>\n### deleteModNote()\n**deleteModNote**(`options`): `Promise`<`boolean`\\>\nDelete a mod note.\n#### Parameters\n##### options\n`Prettify`\nOptions for the request\n#### Returns\n`Promise`<`boolean`\\>\nTrue if it was deleted successfully; false otherwise.\n### deleteWidget()\n**deleteWidget**(`subredditName`, `widgetId`): `Promise`<`void`\\>\nDelete a widget from a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to delete the widget from.\n##### widgetId",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "deleteWidget()",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getBannedWikiContributors()</path>\n`string`\nThe ID of the widget to delete.\n#### Returns\n`Promise`<`void`\\>\n### editFlairTemplate()\n**editFlairTemplate**(`options`): `Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\>\nEdit a flair template for a subreddit. This can be either a post or user flair template. Note: If you leave any of the options fields as undefined, they will reset to their default values.\n#### Parameters\n##### options\n[`EditFlairTemplateOptions`](../../models/type-aliases/EditFlairTemplateOptions.md)\nOptions for the request\n#### Returns\n`Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\>\nThe edited FlairTemplate object.\n### getApprovedUsers()\n**getApprovedUsers**(`options`): [`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nGet a list of users who have been approved to post in a subreddit.\n#### Parameters\n##### options\n`GetSubredditUsersOptions`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nA Listing of User objects.\n### getAppUser()\n**getAppUser**(): `Promise`<[`User`](../../models/classes/User.md)\\>\nGet the user that the app runs as on the provided metadata.\n#### Returns\n`Promise`<[`User`](../../models/classes/User.md)\\>\nA Promise that resolves to a User object.\n#### Example\n```ts\nconst user = await reddit.getAppUser(metadata);\n```\n### getBannedUsers()\n**getBannedUsers**(`options`): [`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nGet a list of users who are banned from a subreddit.\n#### Parameters\n##### options\n`GetSubredditUsersOptions`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nA Listing of User objects.\n### getBannedWikiContributors()\n**getBannedWikiContributors**(`options`): [`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getBannedWikiContributors()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\nGet a list of users who are banned from contributing to the wiki on a subreddit.\n#### Parameters\n##### options\n`GetSubredditUsersOptions`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nA Listing of User objects.\n### getCommentById()\n**getCommentById**(`id`): `Promise`<[`Comment`](../../models/classes/Comment.md)\\>\nGet a [Comment](../../models/classes/Comment.md) object by ID\n#### Parameters\n##### id\n`string`\nThe ID (starting with t1\\_) of the comment to retrieve. e.g. t1\\_1qjpg\n#### Returns\n`Promise`<[`Comment`](../../models/classes/Comment.md)\\>\nA Promise that resolves to a Comment object.\n#### Example\n```ts\nconst comment = await reddit.getCommentById('t1_1qjpg');\n```\n### getComments()\n**getComments**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nGet a list of comments from a specific post or comment.\n#### Parameters\n##### options\n[`GetCommentsOptions`](../../models/type-aliases/GetCommentsOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nA Listing of Comment objects.\n#### Example\n```ts\nconst comments = await reddit\n  .getComments({\n    postId: 't3_1qjpg',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getCommentsAndPostsByUser()\n**getCommentsAndPostsByUser**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nGet a list of posts and comments from a specific user.\n#### Parameters\n##### options\n[`GetUserOverviewOptions`](../../models/type-aliases/GetUserOverviewOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nA Listing of `Post` and `Comment` objects.\n### getCommentsByUser()",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getCurrentUser(), Returns</path>\n**getCommentsByUser**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nGet a list of comments by a specific user.\n#### Parameters\n##### options\n[`GetCommentsByUserOptions`](../../models/type-aliases/GetCommentsByUserOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nA Listing of Comment objects.\n### getControversialPosts()\n**getControversialPosts**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nGet a list of controversial posts from a specific subreddit.\n#### Parameters\n##### options\n[`GetPostsOptionsWithTimeframe`](../../models/type-aliases/GetPostsOptionsWithTimeframe.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nA Listing of Post objects.\n#### Example\n```ts\nconst posts = await reddit\n  .getControversialPosts({\n    subredditName: 'memes',\n    timeframe: 'day',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getCurrentSubreddit()\n**getCurrentSubreddit**(): `Promise`<[`Subreddit`](../../models/classes/Subreddit.md)\\>\nRetrieves the current subreddit.\n#### Returns\n`Promise`<[`Subreddit`](../../models/classes/Subreddit.md)\\>\nA Promise that resolves a Subreddit object.\n#### Example\n```ts\nconst currentSubreddit = await reddit.getCurrentSubreddit();\n```\n### getCurrentSubredditName()\n**getCurrentSubredditName**(): `Promise`<`string`\\>\nRetrieves the name of the current subreddit.\n#### Returns\n`Promise`<`string`\\>\nA Promise that resolves a string representing the current subreddit's name.\n#### Example\n```ts\nconst currentSubredditName = await reddit.getCurrentSubredditName();\n```\n### getCurrentUser()\n**getCurrentUser**(): `Promise`<`undefined` | [`User`](../../models/classes/User.md)\\>\nGet the current calling user. Resolves to undefined for logged-out custom post renders.\n#### Returns",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getCurrentUser()",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getEdited(), Call Signature, Example</path>\n`Promise`<`undefined` | [`User`](../../models/classes/User.md)\\>\nA Promise that resolves to a User object or undefined\n#### Example\n```ts\nconst user = await reddit.getCurrentUser();\n```\n### getCurrentUsername()\n**getCurrentUsername**(): `Promise`<`undefined` | `string`\\>\nGet the current calling user's username. Resolves to undefined for logged-out custom post renders.\n#### Returns\n`Promise`<`undefined` | `string`\\>\nA Promise that resolves to a string representing the username or undefined\n#### Example\n```ts\nconst username = await reddit.getCurrentUsername();\n```\n### getEdited()\n#### Call Signature\n**getEdited**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have been edited recently.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"comment\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getEdited();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getEdited({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getEdited**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nReturn a listing of things that have been edited recently.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"post\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getEdited();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getEdited({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getEdited()",
        "Call Signature",
        "Example"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getModerationLog(), Parameters</path>\n**getEdited**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have been edited recently.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"all\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getEdited();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getEdited({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getHotPosts()\n**getHotPosts**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nGet a list of hot posts from a specific subreddit.\n#### Parameters\n##### options\n[`GetHotPostsOptions`](../../models/type-aliases/GetHotPostsOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nA Listing of Post objects.\n#### Example\n```ts\nconst posts = await reddit\n  .getHotPosts({\n    subredditName: 'memes',\n    timeframe: 'day',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getMessages()\n**getMessages**(`options`): `Promise`<[`Listing`](../../models/classes/Listing.md)<[`PrivateMessage`](../../models/classes/PrivateMessage.md)\\>>\nGet private messages sent to the currently authenticated user.\n#### Parameters\n##### options\n`Prettify`\nOptions for the request\n#### Returns\n`Promise`<[`Listing`](../../models/classes/Listing.md)<[`PrivateMessage`](../../models/classes/PrivateMessage.md)\\>>\n### getModerationLog()\n**getModerationLog**(`options`): [`Listing`](../../models/classes/Listing.md)<[`ModAction`](../../models/interfaces/ModAction.md)\\>\nGet the moderation log for a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getModerationLog()",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getModQueue(), Call Signature</path>\n##### options\n[`GetModerationLogOptions`](../../models/type-aliases/GetModerationLogOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`ModAction`](../../models/interfaces/ModAction.md)\\>\nA Listing of ModAction objects.\n#### Example\n```ts\nconst modActions = await reddit\n  .getModerationLog({\n    subredditName: 'memes',\n    moderatorUsernames: ['spez'],\n    type: 'banuser',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getModerators()\n**getModerators**(`options`): [`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nGet a list of users who are moderators for a subreddit.\n#### Parameters\n##### options\n`GetSubredditUsersOptions`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nA Listing of User objects.\n### getModNotes()\n**getModNotes**(`options`): [`Listing`](../../models/classes/Listing.md)<[`ModNote`](../../models/classes/ModNote.md)\\>\nGet a list of mod notes related to a user in a subreddit.\n#### Parameters\n##### options\n`Prettify`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`ModNote`](../../models/classes/ModNote.md)\\>\nA listing of ModNote objects.\n### getModQueue()\n#### Call Signature\n**getModQueue**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things requiring moderator review, such as reported things and items.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"comment\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\n##### Example",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getModQueue()",
        "Call Signature"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getMutedUsers()</path>\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getModQueue();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getModQueue({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getModQueue**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nReturn a listing of things requiring moderator review, such as reported things and items.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"post\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getModQueue();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getModQueue({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getModQueue**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things requiring moderator review, such as reported things and items.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"all\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getModQueue();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getModQueue({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getMutedUsers()\n**getMutedUsers**(`options`): [`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getMutedUsers()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getPostsByUser(), Returns</path>\nGet a list of users who are muted in a subreddit.\n#### Parameters\n##### options\n`GetSubredditUsersOptions`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nA listing of User objects.\n### getNewPosts()\n**getNewPosts**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nGet a list of new posts from a specific subreddit.\n#### Parameters\n##### options\n[`GetPostsOptions`](../../models/type-aliases/GetPostsOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nA Listing of Post objects.\n#### Example\n```ts\nconst posts = await reddit\n  .getNewPosts({\n    subredditName: 'memes',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getPostById()\n**getPostById**(`id`): `Promise`<[`Post`](../../models/classes/Post.md)\\>\nGets a [Post](../../models/classes/Post.md) object by ID\n#### Parameters\n##### id\n`string`\n#### Returns\n`Promise`<[`Post`](../../models/classes/Post.md)\\>\nA Promise that resolves to a Post object.\n### getPostFlairTemplates()\n**getPostFlairTemplates**(`subredditName`): `Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\[\\]>\nGet the list of post flair templates for a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to get the post flair templates for.\n#### Returns\n`Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\[\\]>\nA Promise that resolves with an array of FlairTemplate objects.\n### getPostsByUser()\n**getPostsByUser**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nGet a list of posts from a specific user.\n#### Parameters\n##### options\n[`GetPostsByUserOptions`](../../models/type-aliases/GetPostsByUserOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getPostsByUser()",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getReports(), Call Signature</path>\nA Listing of Post objects.\n### getReports()\n#### Call Signature\n**getReports**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have been reported.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"comment\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getReports();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getReports({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getReports**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nReturn a listing of things that have been reported.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"post\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getReports();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getReports({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getReports**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have been reported.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"all\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\n##### Example",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getReports()",
        "Call Signature"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getSpam(), Call Signature, Example</path>\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getReports();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getReports({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getRisingPosts()\n**getRisingPosts**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nGet a list of hot posts from a specific subreddit.\n#### Parameters\n##### options\n[`GetPostsOptions`](../../models/type-aliases/GetPostsOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nA Listing of Post objects.\n#### Example\n```ts\nconst posts = await reddit\n  .getRisingPosts({\n    subredditName: 'memes',\n    timeframe: 'day',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getSnoovatarUrl()\n**getSnoovatarUrl**(`username`): `Promise`<`undefined` | `string`\\>\nGet the snoovatar URL for a given username.\n#### Parameters\n##### username\n`string`\nThe username of the snoovatar to retrieve\n#### Returns\n`Promise`<`undefined` | `string`\\>\nA Promise that resolves to a URL of the snoovatar image if it exists.\n### getSpam()\n#### Call Signature\n**getSpam**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have been marked as spam or otherwise removed.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"comment\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getSpam();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getSpam({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getSpam()",
        "Call Signature",
        "Example"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getSubredditById()</path>\n**getSpam**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nReturn a listing of things that have been marked as spam or otherwise removed.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"post\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getSpam();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getSpam({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getSpam**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have been marked as spam or otherwise removed.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"all\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getSpam();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getSpam({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getSubredditById()\n**getSubredditById**(`id`): `Promise`<`undefined` | [`Subreddit`](../../models/classes/Subreddit.md)\\>\nGets a [Subreddit](../../models/classes/Subreddit.md) object by ID\n#### Parameters\n##### id\n`string`\nThe ID (starting with t5\\_) of the subreddit to retrieve. e.g. t5\\_2qjpg\n#### Returns\n`Promise`<`undefined` | [`Subreddit`](../../models/classes/Subreddit.md)\\>\nA Promise that resolves a Subreddit object.\n#### Deprecated",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getSubredditById()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\nUse [getSubredditInfoById](../../models/functions/getSubredditInfoById.md) instead.\n#### Example\n```ts\nconst memes = await reddit.getSubredditById('t5_2qjpg');\n```\n### getSubredditByName()\n**getSubredditByName**(`name`): `Promise`<[`Subreddit`](../../models/classes/Subreddit.md)\\>\nGets a [Subreddit](../../models/classes/Subreddit.md) object by name\n#### Parameters\n##### name\n`string`\nThe name of a subreddit omitting the r/. This is case insensitive.\n#### Returns\n`Promise`<[`Subreddit`](../../models/classes/Subreddit.md)\\>\nA Promise that resolves a Subreddit object.\n#### Deprecated\nUse [getSubredditInfoByName](../../models/functions/getSubredditInfoByName.md) instead.\n#### Example\n```ts\nconst askReddit = await reddit.getSubredditByName('askReddit');\n```\n### getSubredditInfoById()\n**getSubredditInfoById**(`id`): `Promise`<[`SubredditInfo`](../../models/type-aliases/SubredditInfo.md)\\>\nGets a [SubredditInfo](../../models/type-aliases/SubredditInfo.md) object by ID\n#### Parameters\n##### id\n`string`\nThe ID (starting with t5\\_) of the subreddit to retrieve. e.g. t5\\_2qjpg\n#### Returns\n`Promise`<[`SubredditInfo`](../../models/type-aliases/SubredditInfo.md)\\>\nA Promise that resolves a SubredditInfo object.\n#### Example\n```ts\nconst memes = await reddit.getSubredditInfoById('t5_2qjpg');\n```\n### getSubredditInfoByName()\n**getSubredditInfoByName**(`name`): `Promise`<[`SubredditInfo`](../../models/type-aliases/SubredditInfo.md)\\>\nGets a [SubredditInfo](../../models/type-aliases/SubredditInfo.md) object by name\n#### Parameters\n##### name\n`string`\nThe name of a subreddit omitting the r/. This is case insensitive.\n#### Returns\n`Promise`<[`SubredditInfo`](../../models/type-aliases/SubredditInfo.md)\\>\nA Promise that resolves a SubredditInfo object.\n#### Example\n```ts\nconst askReddit = await reddit.getSubredditInfoByName('askReddit');\n```\n### getSubredditLeaderboard()",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getTopPosts()</path>\n**getSubredditLeaderboard**(`subredditId`): `Promise`<[`SubredditLeaderboard`](../../models/type-aliases/SubredditLeaderboard.md)\\>\nReturns a leaderboard for a given subreddit ID.\n#### Parameters\n##### subredditId\n`string`\nID of the subreddit for which the leaderboard is being queried.\n#### Returns\n`Promise`<[`SubredditLeaderboard`](../../models/type-aliases/SubredditLeaderboard.md)\\>\nLeaderboard for the given subreddit.\n### getSubredditRemovalReasons()\n**getSubredditRemovalReasons**(`subredditName`): `Promise`<[`RemovalReason`](../../models/type-aliases/RemovalReason.md)\\[\\]>\nGet the list of subreddit's removal reasons (ordered)\n#### Parameters\n##### subredditName\n`string`\n#### Returns\n`Promise`<[`RemovalReason`](../../models/type-aliases/RemovalReason.md)\\[\\]>\nOrdered array of Removal Reasons\n#### Example\n```ts\nconst reasons = await reddit.getSubredditRemovalReasons('askReddit');\n\nfor (let reason of reasons) {\n  console.log(reason.id, reason.message, reason.title);\n}\n```\n### getSubredditStyles()\n**getSubredditStyles**(`subredditId`): `Promise`<[`SubredditStyles`](../../models/type-aliases/SubredditStyles.md)\\>\nReturns the styles for a given subreddit ID.\n#### Parameters\n##### subredditId\n`string`\nID of the subreddit from which to retrieve the styles.\n#### Returns\n`Promise`<[`SubredditStyles`](../../models/type-aliases/SubredditStyles.md)\\>\nStyles for the given subreddit.\n### getTopPosts()\n**getTopPosts**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nGet a list of controversial posts from a specific subreddit.\n#### Parameters\n##### options\n[`GetPostsOptionsWithTimeframe`](../../models/type-aliases/GetPostsOptionsWithTimeframe.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nA Listing of Post objects.\n#### Example",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getTopPosts()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getUnmoderated(), Call Signature, Parameters, options</path>\n```ts\nconst posts = await reddit\n  .getControversialPosts({\n    subredditName: 'memes',\n    timeframe: 'day',\n    limit: 1000,\n    pageSize: 100,\n  })\n  .all();\n```\n### getUnmoderated()\n#### Call Signature\n**getUnmoderated**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have yet to be approved/removed by a mod.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"comment\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getUnmoderated();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getUnmoderated({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getUnmoderated**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\nReturn a listing of things that have yet to be approved/removed by a mod.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"post\"`\\>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getUnmoderated();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getUnmoderated({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getUnmoderated**(`options`): [`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\nReturn a listing of things that have yet to be approved/removed by a mod.\n##### Parameters\n###### options\n[`ModLogOptions`](../../models/type-aliases/ModLogOptions.md)<`\"all\"`\\>",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getUnmoderated()",
        "Call Signature",
        "Parameters",
        "options"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\n##### Returns\n[`Listing`](../../models/classes/Listing.md)<[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getUnmoderated();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getUnmoderated({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getUserById()\n**getUserById**(`id`): `Promise`<`undefined` | [`User`](../../models/classes/User.md)\\>\nGets a [User](../../models/classes/User.md) object by ID\n#### Parameters\n##### id\n`string`\nThe ID (starting with t2\\_) of the user to retrieve. e.g. t2\\_1qjpg\n#### Returns\n`Promise`<`undefined` | [`User`](../../models/classes/User.md)\\>\nA Promise that resolves to a User object.\n#### Example\n```ts\nconst user = await reddit.getUserById('t2_1qjpg');\n```\n### getUserByUsername()\n**getUserByUsername**(`username`): `Promise`<`undefined` | [`User`](../../models/classes/User.md)\\>\nGets a [User](../../models/classes/User.md) object by username\n#### Parameters\n##### username\n`string`\nThe username of the user omitting the u/. e.g. 'devvit'\n#### Returns\n`Promise`<`undefined` | [`User`](../../models/classes/User.md)\\>\nA Promise that resolves to a User object or undefined if user is not found (user doesn't exist, account suspended, etc).\n#### Example\n```ts\nconst user = await reddit.getUserByUsername('devvit');\nif (user) {\n  console.log(user);\n}\n```\n### getUserFlairTemplates()\n**getUserFlairTemplates**(`subredditName`): `Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\[\\]>\nGet the list of user flair templates for a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to get the user flair templates for.\n#### Returns\n`Promise`<[`FlairTemplate`](../../models/classes/FlairTemplate.md)\\[\\]>\nA Promise that resolves with an array of FlairTemplate objects.\n### getVaultByAddress()",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getWikiPage(), Returns</path>\n**getVaultByAddress**(`address`): `Promise`<[`Vault`](../../models/type-aliases/Vault.md)\\>\nGets a [Vault](../../models/type-aliases/Vault.md) for the specified address.\n#### Parameters\n##### address\n`string`\nThe address (starting with 0x) of the Vault.\n#### Returns\n`Promise`<[`Vault`](../../models/type-aliases/Vault.md)\\>\n#### Example\n```ts\nconst vault = await reddit.getVaultByAddress('0x205ee28744456bDBf180A0Fa7De51e0F116d54Ed');\n```\n### getVaultByUserId()\n**getVaultByUserId**(`userId`): `Promise`<[`Vault`](../../models/type-aliases/Vault.md)\\>\nGets a [Vault](../../models/type-aliases/Vault.md) for the specified user.\n#### Parameters\n##### userId\n`string`\nThe ID (starting with t2\\_) of the Vault owner.\n#### Returns\n`Promise`<[`Vault`](../../models/type-aliases/Vault.md)\\>\n#### Example\n```ts\nconst vault = await reddit.getVaultByUserId('t2_1w72');\n```\n### getWidgets()\n**getWidgets**(`subredditName`): `Promise`<[`Widget`](../../models/classes/Widget.md)\\[\\]>\nGet the widgets for a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to get the widgets for.\n#### Returns\n`Promise`<[`Widget`](../../models/classes/Widget.md)\\[\\]>\n-   An array of Widget objects.\n### getWikiContributors()\n**getWikiContributors**(`options`): [`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nGet a list of users who are wiki contributors of a subreddit.\n#### Parameters\n##### options\n`GetSubredditUsersOptions`\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`User`](../../models/classes/User.md)\\>\nA Listing of User objects.\n### getWikiPage()\n**getWikiPage**(`subredditName`, `page`): `Promise`<[`WikiPage`](../../models/classes/WikiPage.md)\\>\nGet a wiki page from a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to get the wiki page from.\n##### page\n`string`\nThe name of the wiki page to get.\n#### Returns\n`Promise`<[`WikiPage`](../../models/classes/WikiPage.md)\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getWikiPage()",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, muteUser(), Returns</path>\nThe requested WikiPage object.\n### getWikiPageRevisions()\n**getWikiPageRevisions**(`options`): [`Listing`](../../models/classes/Listing.md)<[`WikiPageRevision`](../../models/classes/WikiPageRevision.md)\\>\nGet the revisions for a wiki page.\n#### Parameters\n##### options\n[`GetPageRevisionsOptions`](../../models/type-aliases/GetPageRevisionsOptions.md)\nOptions for the request\n#### Returns\n[`Listing`](../../models/classes/Listing.md)<[`WikiPageRevision`](../../models/classes/WikiPageRevision.md)\\>\nA Listing of WikiPageRevision objects.\n### getWikiPages()\n**getWikiPages**(`subredditName`): `Promise`<`string`\\[\\]>\nGet the wiki pages for a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to get the wiki pages from.\n#### Returns\n`Promise`<`string`\\[\\]>\nA list of the wiki page names for the subreddit.\n### getWikiPageSettings()\n**getWikiPageSettings**(`subredditName`, `page`): `Promise`<[`WikiPageSettings`](../../models/classes/WikiPageSettings.md)\\>\nGet the settings for a wiki page.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit the wiki is in.\n##### page\n`string`\nThe name of the wiki page to get the settings for.\n#### Returns\n`Promise`<[`WikiPageSettings`](../../models/classes/WikiPageSettings.md)\\>\nA WikiPageSettings object.\n### inviteModerator()\n**inviteModerator**(`options`): `Promise`<`void`\\>\nInvite a user to become a moderator of a subreddit.\n#### Parameters\n##### options\n[`InviteModeratorOptions`](../type-aliases/InviteModeratorOptions.md)\nOptions for the request\n#### Returns\n`Promise`<`void`\\>\n### markAllMessagesAsRead()\n**markAllMessagesAsRead**(): `Promise`<`void`\\>\nMark all private messages as read.\n#### Returns\n`Promise`<`void`\\>\n### muteUser()\n**muteUser**(`options`): `Promise`<`void`\\>\nMute a user in a subreddit. Muting a user prevents them from sending modmail.\n#### Parameters\n##### options\n[`MuteUserOptions`](../type-aliases/MuteUserOptions.md)\nOptions for the request\n#### Returns\n`Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "muteUser()",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, removeUserFlair()</path>\n### remove()\n**remove**(`id`, `isSpam`): `Promise`<`void`\\>\nRemove a post or comment.\n#### Parameters\n##### id\n`string`\nThe id of the post (t3\\*) or comment (t1\\*) to remove.\n##### isSpam\n`boolean`\nIs the post or comment being removed because it's spam?\n#### Returns\n`Promise`<`void`\\>\n#### Example\n```ts\nawait reddit.remove('t3_123456', false);\nawait reddit.remove('t1_123456', true);\n```\n### removeEditorFromWikiPage()\n**removeEditorFromWikiPage**(`subredditName`, `page`, `username`): `Promise`<`void`\\>\nRemove an editor from a wiki page.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit the wiki is in.\n##### page\n`string`\nThe name of the wiki page to remove the editor from.\n##### username\n`string`\nThe username of the user to remove as an editor.\n#### Returns\n`Promise`<`void`\\>\n### removeModerator()\n**removeModerator**(`username`, `subredditName`): `Promise`<`void`\\>\nRemove a user as a moderator of a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to remove as a moderator. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to remove the user as a moderator from. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### removePostFlair()\n**removePostFlair**(`subredditName`, `postId`): `Promise`<`void`\\>\nRemove the flair for a post in a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to remove the flair from.\n##### postId\n`string`\nThe ID of the post to remove the flair from.\n#### Returns\n`Promise`<`void`\\>\n### removeUser()\n**removeUser**(`username`, `subredditName`): `Promise`<`void`\\>\nRemove a user's approval to post in a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to remove approval from. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to remove the user's approval from. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### removeUserFlair()\n**removeUserFlair**(`subredditName`, `username`): `Promise`<`void`\\>",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "removeUserFlair()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, revokeModeratorInvite()</path>\nRemove the flair for a user in a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to remove the flair from.\n##### username\n`string`\nThe username of the user to remove the flair from.\n#### Returns\n`Promise`<`void`\\>\n### removeWikiContributor()\n**removeWikiContributor**(`username`, `subredditName`): `Promise`<`void`\\>\nRemove a user's wiki contributor status for a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to remove wiki contributor status from. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to remove the user's wiki contributor status from. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### reorderWidgets()\n**reorderWidgets**(`subredditName`, `orderByIds`): `Promise`<`void`\\>\nReorder the widgets for a subreddit.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to reorder the widgets for.\n##### orderByIds\n`string`\\[\\]\nAn array of widget IDs in the order that they should be displayed.\n#### Returns\n`Promise`<`void`\\>\n### report()\n**report**(`thing`, `options`): `Promise`<`JsonStatus`\\>\nReport a Post or Comment\nThe report is sent to the moderators of the subreddit for review.\n#### Parameters\n##### thing\nPost or Comment\n[`Post`](../../models/classes/Post.md) | [`Comment`](../../models/classes/Comment.md)\n##### options\nOptions\n###### reason\n`string`\nWhy the thing is reported\n#### Returns\n`Promise`<`JsonStatus`\\>\n#### Example\n```ts\nawait reddit.report(post, {\n  reason: 'This is spam!',\n});\n```\n### revertWikiPage()\n**revertWikiPage**(`subredditName`, `page`, `revisionId`): `Promise`<`void`\\>\nRevert a wiki page to a previous revision.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit the wiki is in.\n##### page\n`string`\nThe name of the wiki page to revert.\n##### revisionId\n`string`\nThe ID of the revision to revert to.\n#### Returns\n`Promise`<`void`\\>\n### revokeModeratorInvite()\n**revokeModeratorInvite**(`username`, `subredditName`): `Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "revokeModeratorInvite()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, setUserFlair()</path>\nRevoke a moderator invite for a user to a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to revoke the invite for. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to revoke the invite for. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### sendPrivateMessage()\n**sendPrivateMessage**(`options`): `Promise`<`void`\\>\nSends a private message to a user.\n#### Parameters\n##### options\n[`SendPrivateMessageOptions`](../../models/type-aliases/SendPrivateMessageOptions.md)\nThe options for sending the message.\n#### Returns\n`Promise`<`void`\\>\nA Promise that resolves if the private message was successfully sent.\n### sendPrivateMessageAsSubreddit()\n**sendPrivateMessageAsSubreddit**(`options`): `Promise`<`void`\\>\nSends a private message to a user on behalf of a subreddit.\n#### Parameters\n##### options\n[`SendPrivateMessageAsSubredditOptions`](../../models/type-aliases/SendPrivateMessageAsSubredditOptions.md)\nThe options for sending the message as a subreddit.\n#### Returns\n`Promise`<`void`\\>\nA Promise that resolves if the private message was successfully sent.\n### setModeratorPermissions()\n**setModeratorPermissions**(`username`, `subredditName`, `permissions`): `Promise`<`void`\\>\nUpdate the permissions of a moderator of a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to update the permissions for. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit. e.g. 'memes'\n##### permissions\n[`ModeratorPermission`](../../models/type-aliases/ModeratorPermission.md)\\[\\]\nThe permissions to give the user. e.g \\['posts', 'wiki'\\]\n#### Returns\n`Promise`<`void`\\>\n### setPostFlair()\n**setPostFlair**(`options`): `Promise`<`void`\\>\nSet the flair for a post in a subreddit.\n#### Parameters\n##### options\n[`SetPostFlairOptions`](../../models/type-aliases/SetPostFlairOptions.md)\nOptions for the request\n#### Returns\n`Promise`<`void`\\>\n### setUserFlair()\n**setUserFlair**(`options`): `Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "setUserFlair()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, submitPost()</path>\nSet the flair for a user in a subreddit.\n#### Parameters\n##### options\n[`SetUserFlairOptions`](../../models/type-aliases/SetUserFlairOptions.md)\nOptions for the request\n#### Returns\n`Promise`<`void`\\>\n### setUserFlairBatch()\n**setUserFlairBatch**(`subredditName`, `flairs`): `Promise`<`FlairCsvResult`\\[\\]>\nSet the flair of multiple users in the same subreddit with a single API call. Can process up to 100 entries at once.\n#### Parameters\n##### subredditName\n`string`\nThe name of the subreddit to edit flairs in.\n##### flairs\n[`SetUserFlairBatchConfig`](../../models/type-aliases/SetUserFlairBatchConfig.md)\\[\\]\nArray of user flair configuration objects. If both text and cssClass are empty for a given user the flair will be cleared.\n#### Returns\n`Promise`<`FlairCsvResult`\\[\\]>\n-   Array of statuses for each entry provided.\n### submitComment()\n**submitComment**(`options`): `Promise`<[`Comment`](../../models/classes/Comment.md)\\>\nSubmit a new comment to a post or comment.\n#### Parameters\n##### options\n[`CommentSubmissionOptions`](../../models/type-aliases/CommentSubmissionOptions.md) & `object`\nYou must provide either `options.text` or `options.richtext` but not both.\n#### Returns\n`Promise`<[`Comment`](../../models/classes/Comment.md)\\>\nA Promise that resolves to a Comment object.\n#### Example\n```ts\nimport { RunAs } from '@devvit/public-api';\n\nconst comment = await reddit.submitComment({\n  id: 't1_1qgif',\n  text: 'Hello world!',\n  runAs: RunAs.APP,\n});\n```\n### submitPost()\n**submitPost**(`options`): `Promise`<[`Post`](../../models/classes/Post.md)\\>\nSubmits a new post to a subreddit.\n#### Parameters\n##### options\n[`SubmitPostOptions`](../../models/type-aliases/SubmitPostOptions.md)\nEither a self post or a link post.\n#### Returns\n`Promise`<[`Post`](../../models/classes/Post.md)\\>\nA Promise that resolves to a Post object.\n#### Examples",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "submitPost()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\n```ts\nconst post = await reddit.submitPost({\n  subredditName: 'devvit',\n  title: 'Hello World',\n  richtext: new RichTextBuilder()\n    .heading({ level: 1 }, (h) => {\n      h.rawText('Hello world');\n    })\n    .codeBlock({}, (cb) => cb.rawText('This post was created via the Devvit API'))\n    .build(),\n});\n```\nBy default, `submitPost()` creates a Post on behalf of the App account, but it may be called on behalf of the User making the request by setting the option `runAs: RunAs.USER`. When using `runAs: RunAs.USER` to create an experience Post, you must specify the `userGeneratedContent` option. For example:\n```ts\nimport { RunAs } from '@devvit/public-api';\n\nconst post = await reddit.submitPost({\n title: 'My Devvit Post',\n runAs: RunAs.USER,\n userGeneratedContent: {\n   text: \"hello there\",\n   imageUrls: [\"https://styles.redditmedia.com/t5_5wa5ww/styles/communityIcon_wyopomb2xb0a1.png\", \"https://styles.redditmedia.com/t5_49fkib/styles/bannerBackgroundImage_5a4axis7cku61.png\"]\n   },\n subredditName: await reddit.getCurrentSubredditName(),\n textFallback: {\n   text: 'This is a Devvit post!',\n },\n preview: (\n   <vstack height=\"100%\" width=\"100%\" alignment=\"middle center\">\n     <text size=\"large\">Loading...</text>\n   </vstack>\n ),\n});\n```\n### subscribeToCurrentSubreddit()\n**subscribeToCurrentSubreddit**(): `Promise`<`void`\\>\nSubscribes to the subreddit in which the app is installed. No-op if the user is already subscribed. This method will execute as the app account by default. To subscribe on behalf of a user, please contact Reddit.\n#### Returns\n`Promise`<`void`\\>\n### unbanUser()\n**unbanUser**(`username`, `subredditName`): `Promise`<`void`\\>\nUnban a user from a subreddit.\n#### Parameters\n##### username\n`string`\nThe username of the user to unban. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to unban the user from. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### unbanWikiContributor()",
    "metadata": {
      "type": [
        "code",
        "text",
        "heading"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, updateWikiPageSettings(), Returns</path>\n**unbanWikiContributor**(`username`, `subredditName`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\nThe username of the user to unban. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to unban the user from contributing to the wiki on. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### unmuteUser()\n**unmuteUser**(`username`, `subredditName`): `Promise`<`void`\\>\nUnmute a user in a subreddit. Unmuting a user allows them to send modmail.\n#### Parameters\n##### username\n`string`\nThe username of the user to unmute. e.g. 'spez'\n##### subredditName\n`string`\nThe name of the subreddit to unmute the user in. e.g. 'memes'\n#### Returns\n`Promise`<`void`\\>\n### unsubscribeFromCurrentSubreddit()\n**unsubscribeFromCurrentSubreddit**(): `Promise`<`void`\\>\nUnsubscribes from the subreddit in which the app is installed. No-op if the user isn't subscribed. This method will execute as the app account by default. To unsubscribe on behalf of a user, please contact Reddit.\n#### Returns\n`Promise`<`void`\\>\n### updateWikiPage()\n**updateWikiPage**(`options`): `Promise`<[`WikiPage`](../../models/classes/WikiPage.md)\\>\nUpdate a wiki page.\n#### Parameters\n##### options\n[`UpdateWikiPageOptions`](../../models/type-aliases/UpdateWikiPageOptions.md)\nOptions for the request\n#### Returns\n`Promise`<[`WikiPage`](../../models/classes/WikiPage.md)\\>\nThe updated WikiPage object.\n### updateWikiPageSettings()\n**updateWikiPageSettings**(`options`): `Promise`<[`WikiPageSettings`](../../models/classes/WikiPageSettings.md)\\>\nUpdate the settings for a wiki page.\n#### Parameters\n##### options\n[`UpdatePageSettingsOptions`](../../models/type-aliases/UpdatePageSettingsOptions.md)\nOptions for the request\n#### Returns\n`Promise`<[`WikiPageSettings`](../../models/classes/WikiPageSettings.md)\\>\nA WikiPageSettings object.",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "updateWikiPageSettings()",
        "Returns"
      ],
      "level": 3
    }
  }
]