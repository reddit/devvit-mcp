[
  {
    "pageContent": "<path>Type Alias: PartialJSONValue</path>\n[**@devvit/public-api v0.11.18-dev**](../README.md)\n# Type Alias: PartialJSONValue\n**PartialJSONValue** = [`PartialJSONPrimitive`](PartialJSONPrimitive.md) | [`PartialJSONArray`](PartialJSONArray.md) | [`PartialJSONObject`](PartialJSONObject.md)\nLike JSONValue but deeply allow lossy undefined values that are easier to type but may de/serialize differently or incorrectly. For example:\n-   `JSON.stringify({a: 1, b: 2, c: undefined, d: 3})`: `'{\"a\":1,\"b\":2,\"d\":3}'`.\n-   `JSON.stringify([1, 2, undefined, 3])`: `'[1,2,null,3]'`.\n-   `JSON.stringify(undefined)`: `undefined`.\nJSON.stringify() accepts an `any` input so there are no typing guards. Prefer plain JSONValue when possible.\nOne mostly only cares about stringify since creating a JSON string with undefineds in it would require deliberate effort. These all throw errors:\n-   `JSON.parse('{a: 1, b: 2, c: undefined, d: 3}')`.\n-   `JSON.parse('[1, 2, undefined, 3]')`.\n-   `JSON.parse('undefined')`.\n-   `JSON.parse(undefined)` (also a typing error).",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Type Alias: PartialJSONValue"
      ],
      "level": 0
    }
  }
]