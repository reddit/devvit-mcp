[
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, expire()</path>\n[**@devvit/public-api v0.11.18-dev**](../README.md)\n# Type Alias: TxClientLike\n**TxClientLike** = `object`\n## Methods\n### del()\n**del**(...`keys`): `Promise`<`TxClientLike`\\>\nRemoves the specified keys. A key is ignored if it does not exist. [https://redis.io/commands/del/](https://redis.io/commands/del/)\n#### Parameters\n##### keys\n...`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkeys\n#### Example\n```ts\nasync function delExample(context: Devvit.Context) {\n  await context.redis.set('quantity', '5');\n  await context.redis.del('quantity');\n}\n```\n### discard()\n**discard**(): `Promise`<`void`\\>\nFlushes all previously queued commands in a transaction and restores the connection state to normal. If WATCH was used, DISCARD unwatches all keys watched by the connection. [https://redis.io/docs/latest/commands/discard/](https://redis.io/docs/latest/commands/discard/)\n#### Returns\n`Promise`<`void`\\>\n#### Example\n```ts\nasync function discardExample(context: Devvit.Context) {\n  await context.redis.set('price', '25');\n\n  const txn = await context.redis.watch('price');\n\n  await txn.multi(); // Begin a transaction\n  await txn.incrBy('price', 5);\n  await txn.discard(); // Discard the commands in the transaction\n}\n```\n### exec()\n**exec**(): `Promise`<`any`\\[\\]>\nExecutes all previously queued commands in a transaction and restores the connection state to normal. [https://redis.io/commands/exec/](https://redis.io/commands/exec/)\n#### Returns\n`Promise`<`any`\\[\\]>\narray, each element being the reply to each of the commands in the atomic transaction.\n#### Example\n```ts\nasync function execExample(context: Devvit.Context) {\n  await context.redis.set('karma', '32');\n\n  const txn = await context.redis.watch('quantity');\n\n  await txn.multi(); // Begin a transaction\n  await txn.incrBy('karma', 10);\n  await txn.exec(); // Execute the commands in the transaction\n}\n```\n### expire()\n**expire**(`key`, `seconds`): `Promise`<`TxClientLike`\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "expire()"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, getRange(), Parameters</path>\nSet a timeout on key. [https://redis.io/commands/expire/](https://redis.io/commands/expire/)\n#### Parameters\n##### key\n`string`\n##### seconds\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkey\n#### Arg\nseconds\n#### Example\n```ts\nasync function expireExample(context: Devvit.Context) {\n  await context.redis.set('product', 'milk');\n  await context.redis.expire('product', 60); // Set the product to expire in 60 seconds\n}\n```\n### expireTime()\n**expireTime**(`key`): `Promise`<`TxClientLike`\\>\nReturns the absolute Unix timestamp in seconds at which the given key will expire [https://redis.io/commands/expiretime/](https://redis.io/commands/expiretime/)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nexpiration Unix timestamp in seconds, or a negative value in order to signal an error\n#### Arg\nkey\n#### Example\n```ts\nasync function expireTimeExample(context: Devvit.Context) {\n  await context.redis.set('product', 'milk');\n  const expireTime: number = await context.redis.expireTime('product');\n  console.log('Expire time: ' + expireTime);\n}\n```\n### get()\n**get**(`key`): `Promise`<`TxClientLike`\\>\nGet the value of key. If the key does not exist the special value nil is returned. [https://redis.io/commands/get/](https://redis.io/commands/get/)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nvalue of key or null when key does not exist.\n#### Arg\nkey\n#### Example\n```ts\nasync function getExample(context: Devvit.Context) {\n  await context.redis.set('quantity', '5');\n  const quantity: string | undefined = await context.redis.get('quantity');\n  console.log('Quantity: ' + quantity);\n}\n```\n### getRange()\n**getRange**(`key`, `start`, `end`): `Promise`<`TxClientLike`\\>\nReturns the substring of the string value stored at key, determined by the offsets start and end (both are inclusive). [https://redis.io/commands/getrange/](https://redis.io/commands/getrange/)\n#### Parameters\n##### key\n`string`\n##### start\n`number`\n##### end",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "getRange()",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, hGet()</path>\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\nsubstring determined by offsets \\[start, end\\]\n#### Arg\nkey\n#### Arg\nstart\n#### Arg\nend\n#### Example\n```ts\nasync function getRangeExample(context: Devvit.Context) {\n  await context.redis.set('word', 'tacocat');\n  const range: string = await context.redis.getRange('word', 0, 3);\n  console.log('Range from index 0 to 3: ' + range);\n}\n```\n### hdel()\n**hdel**(`key`, `fields`): `Promise`<`TxClientLike`\\>\nRemoves the specified fields from the hash stored at key. [https://redis.io/commands/hdel/](https://redis.io/commands/hdel/)\n#### Parameters\n##### key\n`string`\n##### fields\n`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of fields that were removed from the hash\n#### Deprecated\nUse [TxClientLike.hDel](#hdel-2) instead.\n#### Arg\nkey\n#### Arg\nfields\n### hDel()\n**hDel**(`key`, `fields`): `Promise`<`TxClientLike`\\>\nRemoves the specified fields from the hash stored at key. [https://redis.io/commands/hdel/](https://redis.io/commands/hdel/)\n#### Parameters\n##### key\n`string`\n##### fields\n`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of fields that were removed from the hash\n#### Arg\nkey\n#### Arg\nfields\n#### Example\n```ts\nasync function hDelExample(context: Devvit.Context) {\n  await context.redis.hSet('fruits', { apple: '5', orange: '7', kiwi: '9' });\n  const numFieldsRemoved = await context.redis.hDel('fruits', ['apple', 'kiwi']);\n  console.log('Number of fields removed: ' + numFieldsRemoved);\n}\n```\n### hget()\n**hget**(`key`, `field`): `Promise`<`TxClientLike`\\>\nReturns the value associated with field in the hash stored at key. [https://redis.io/commands/hget](https://redis.io/commands/hget)\n#### Parameters\n##### key\n`string`\n##### field\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nvalue associated with field\n#### Deprecated\nUse [TxClientLike.hGet](#hget-2) instead.\n#### Arg\nkey\n#### Arg\nfield\n### hGet()\n**hGet**(`key`, `field`): `Promise`<`TxClientLike`\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "hGet()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, hincrby(), Parameters, value</path>\nReturns the value associated with field in the hash stored at key. [https://redis.io/commands/hget](https://redis.io/commands/hget)\n#### Parameters\n##### key\n`string`\n##### field\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nvalue associated with field\n#### Arg\nkey\n#### Arg\nfield\n#### Example\n```ts\nasync function hGetExample(context: Devvit.Context) {\n  await context.redis.hSet('fruits', { apple: '5', orange: '7', kiwi: '9' });\n  const result: string | undefined = await context.redis.hGet('fruits', 'orange');\n  console.log('Value of orange: ' + result);\n}\n```\n### hgetall()\n**hgetall**(`key`): `Promise`<`TxClientLike`\\>\nReturns all fields and values of the hash stored at key [https://redis.io/commands/hgetall](https://redis.io/commands/hgetall)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\na map of fields and their values stored in the hash,\n#### Deprecated\nUse [TxClientLike.hGetAll](#hgetall-2) instead.\n#### Arg\nkey\n### hGetAll()\n**hGetAll**(`key`): `Promise`<`TxClientLike`\\>\nReturns all fields and values of the hash stored at key [https://redis.io/commands/hgetall](https://redis.io/commands/hgetall)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\na map of fields and their values stored in the hash,\n#### Arg\nkey\n#### Example\n```\nasync function hGetAllExample(context: Devvit.Context) {\n await context.redis.hSet(\"groceryList\", {\n  \"eggs\": \"12\",\n  \"apples\": \"3\",\n  \"milk\": \"1\"\n });\n\n const record : Record<string, string> | undefined = await context.redis.hGetAll(\"groceryList\");\n\n if (record != undefined) {\n  console.log(\"Eggs: \" + record.eggs + \", Apples: \" + record.apples + \", Milk: \" + record.milk);\n }\n}\n```\n### hincrby()\n**hincrby**(`key`, `field`, `value`): `Promise`<`TxClientLike`\\>\nIncrements the number stored at field in the hash stored at key by increment. [https://redis.io/commands/hincrby/](https://redis.io/commands/hincrby/)\n#### Parameters\n##### key\n`string`\n##### field\n`string`\n##### value\n`number`",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "hincrby()",
        "Parameters",
        "value"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, hLen(), Parameters</path>\n#### Returns\n`Promise`<`TxClientLike`\\>\nvalue of key after the increment\n#### Deprecated\nUse [TxClientLike.hIncrBy](#hincrby-2) instead.\n#### Arg\nkey\n#### Arg\nfield\n#### Arg\nvalue\n### hIncrBy()\n**hIncrBy**(`key`, `field`, `value`): `Promise`<`TxClientLike`\\>\nIncrements the number stored at field in the hash stored at key by increment. [https://redis.io/commands/hincrby/](https://redis.io/commands/hincrby/)\n#### Parameters\n##### key\n`string`\n##### field\n`string`\n##### value\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\nvalue of key after the increment\n#### Arg\nkey\n#### Arg\nfield\n#### Arg\nvalue\n#### Example\n```ts\nasync function hIncrByExample(context: Devvit.Context) {\n  await context.redis.hSet('user123', { karma: '100' });\n  await context.redis.hIncrBy('user123', 'karma', 5);\n}\n```\n### hkeys()\n**hkeys**(`key`): `Promise`<`TxClientLike`\\>\nReturns all field names in the hash stored at key.\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Deprecated\nUse [TxClientLike.hKeys](#hkeys-2) instead.\n#### Arg\nkey\n### hKeys()\n**hKeys**(`key`): `Promise`<`TxClientLike`\\>\nReturns all field names in the hash stored at key.\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkey\n#### Example\n```ts\nasync function hKeysExample(context: Devvit.Context) {\n  await context.redis.hSet('prices', {\n    chair: '48',\n    desk: '95',\n    whiteboard: '23',\n  });\n  const keys: string[] = await context.redis.hKeys('prices');\n  console.log('Keys: ' + keys);\n}\n```\n### hlen()\n**hlen**(`key`): `Promise`<`TxClientLike`\\>\nReturns the number of fields contained in the hash stored at key.\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nthe number of fields in the hash, or 0 when the key does not exist.\n#### Deprecated\nUse [TxClientLike.hLen](#hlen-2) instead.\n#### Arg\nkey\n### hLen()\n**hLen**(`key`): `Promise`<`TxClientLike`\\>\nReturns the number of fields contained in the hash stored at key.\n#### Parameters",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "hLen()",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, hScan(), Arg</path>\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nthe number of fields in the hash, or 0 when the key does not exist.\n#### Arg\nkey\n#### Example\n```ts\nasync function hLenExample(context: Devvit.Context) {\n  await context.redis.hSet('supplies', {\n    paperclips: '25',\n    pencils: '10',\n    erasers: '5',\n    pens: '7',\n  });\n  const numberOfFields: number = await context.redis.hLen('supplies');\n  console.log('Number of fields: ' + numberOfFields);\n}\n```\n### hMGet()\n**hMGet**(`key`, `fields`): `Promise`<`TxClientLike`\\>\nReturns the values associated with fields in the hash stored at key. [https://redis.io/commands/hmget](https://redis.io/commands/hmget)\n#### Parameters\n##### key\n`string`\n##### fields\n`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nvalues associated with each field in the order they appear in fields\n#### Arg\nkey\n#### Arg\nfields\n#### Example\n```ts\nasync function hMGetExample(context: Devvit.Context) {\n  await context.redis.hSet('fruits', { apple: '5', orange: '7', kiwi: '9' });\n  const result: string[] | undefined = await context.redis.hMGet('fruits', [\n    'orange',\n    'grape',\n    'apple',\n  ]);\n  console.log('Value of fields: ' + result); // \"Value of fields: [\"7\", undefined, \"5\"]\n}\n```\n### hscan()\n**hscan**(`key`, `cursor`, `pattern`?, `count`?): `Promise`<`TxClientLike`\\>\nIterates fields of Hash types and their associated values.\n#### Parameters\n##### key\n`string`\n##### cursor\n`number`\n##### pattern?\n`string`\n##### count?\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Deprecated\nUse [TxClientLike.hScan](#hscan-2) instead.\n#### Arg\nkey\n#### Arg\ncursor\n#### Arg\npattern\n#### Arg\ncount\n### hScan()\n**hScan**(`key`, `cursor`, `pattern`?, `count`?): `Promise`<`TxClientLike`\\>\nIterates fields of Hash types and their associated values.\n#### Parameters\n##### key\n`string`\n##### cursor\n`number`\n##### pattern?\n`string`\n##### count?\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkey\n#### Arg\ncursor\n#### Arg\npattern\n#### Arg\ncount",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "hScan()",
        "Arg"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, incrBy()</path>\n#### Example\n```ts\nasync function hScanExample(context: Devvit.Context) {\n  await context.redis.hSet('userInfo', {\n    name: 'Bob',\n    startDate: '01-05-20',\n    totalAwards: '12',\n  });\n\n  const hScanResponse = await context.redis.hScan('userInfo', 0);\n\n  hScanResponse.fieldValues.forEach((x) => {\n    console.log(\"Field: '\" + x.field + \"', Value: '\" + x.value + \"'\");\n  });\n}\n```\n### hset()\n**hset**(`key`, `fieldValues`): `Promise`<`TxClientLike`\\>\nSets the specified fields to their respective values in the hash stored at key. [https://redis.io/commands/hset](https://redis.io/commands/hset)\n#### Parameters\n##### key\n`string`\n##### fieldValues\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of fields that were added\n#### Deprecated\nUse [TxClientLike.hSet](#hset-2) instead.\n#### Arg\nkey\n#### Arg\nfieldValues\n### hSet()\n**hSet**(`key`, `fieldValues`): `Promise`<`TxClientLike`\\>\nSets the specified fields to their respective values in the hash stored at key. [https://redis.io/commands/hset](https://redis.io/commands/hset)\n#### Parameters\n##### key\n`string`\n##### fieldValues\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of fields that were added\n#### Arg\nkey\n#### Arg\nfieldValues\n#### Example\n```ts\nasync function hSetExample(context: Devvit.Context) {\n  const numFieldsAdded = await context.redis.hSet('fruits', { apple: '5', orange: '7', kiwi: '9' });\n  console.log('Number of fields added: ' + numFieldsAdded);\n}\n```\n### incrBy()\n**incrBy**(`key`, `value`): `Promise`<`TxClientLike`\\>\nIncrements the number stored at key by increment. [https://redis.io/commands/incrby/](https://redis.io/commands/incrby/)\n#### Parameters\n##### key\n`string`\n##### value\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkey\n#### Arg\nvalue\n#### Example",
    "metadata": {
      "type": [
        "heading",
        "code",
        "text"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "incrBy()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, multi()</path>\n```ts\nasync function incrByExample(context: Devvit.Context) {\n  await context.redis.set('totalPoints', '53');\n  const updatedPoints: number = await context.redis.incrBy('totalPoints', 100);\n  console.log('Updated points: ' + updatedPoints);\n}\n```\n### mget()\n**mget**(`keys`): `Promise`<`TxClientLike`\\>\nReturns the values of all specified keys. [https://redis.io/commands/mget/](https://redis.io/commands/mget/)\n#### Parameters\n##### keys\n`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nlist of values at the specified keys\n#### Deprecated\nUse [TxClientLike.mGet](#mget-2) instead.\n#### Arg\nkeys\n### mGet()\n**mGet**(`keys`): `Promise`<`TxClientLike`\\>\nReturns the values of all specified keys. [https://redis.io/commands/mget/](https://redis.io/commands/mget/)\n#### Parameters\n##### keys\n`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nlist of values at the specified keys\n#### Arg\nkeys\n#### Example\n```ts\nasync function mGetExample(context: Devvit.Context) {\n  await context.redis.mSet({ name: 'Zeek', occupation: 'Developer' });\n  const result: (string | null)[] = await context.redis.mGet(['name', 'occupation']);\n  result.forEach((x) => {\n    console.log(x);\n  });\n}\n```\n### mset()\n**mset**(`keyValues`): `Promise`<`TxClientLike`\\>\nSets the given keys to their respective values. [https://redis.io/commands/mset/](https://redis.io/commands/mset/)\n#### Parameters\n##### keyValues\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Deprecated\nUse [TxClientLike.mSet](#mset-2) instead.\n#### Arg\nkeyValues\n### mSet()\n**mSet**(`keyValues`): `Promise`<`TxClientLike`\\>\nSets the given keys to their respective values. [https://redis.io/commands/mset/](https://redis.io/commands/mset/)\n#### Parameters\n##### keyValues\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkeyValues\n#### Example\n```ts\nasync function mSetExample(context: Devvit.Context) {\n  await context.redis.mSet({ name: 'Zeek', occupation: 'Developer' });\n}\n```\n### multi()\n**multi**(): `Promise`<`void`\\>",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "multi()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, strlen()</path>\nMarks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC. [https://redis.io/commands/multi/](https://redis.io/commands/multi/)\n#### Returns\n`Promise`<`void`\\>\n#### Example\n```ts\nasync function multiExample(context: Devvit.Context) {\n  await context.redis.set('karma', '32');\n\n  const txn = await context.redis.watch('quantity');\n\n  await txn.multi(); // Begin a transaction\n  await txn.incrBy('karma', 10);\n  await txn.exec(); // Execute the commands in the transaction\n}\n```\n### set()\n**set**(`key`, `value`, `options`?): `Promise`<`TxClientLike`\\>\nSet key to hold the string value. If key already holds a value, it is overwritten [https://redis.io/commands/set/](https://redis.io/commands/set/)\n#### Parameters\n##### key\n`string`\n##### value\n`string`\n##### options?\n[`SetOptions`](SetOptions.md)\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkey\n#### Arg\nvalue\n#### Arg\noptions\n#### Example\n```ts\nasync function setExample(context: Devvit.Context) {\n  await context.redis.set('quantity', '5');\n}\n```\n### setRange()\n**setRange**(`key`, `offset`, `value`): `Promise`<`TxClientLike`\\>\nOverwrites part of the string stored at key, starting at the specified offset, for the entire length of value. [https://redis.io/commands/setrange/](https://redis.io/commands/setrange/)\n#### Parameters\n##### key\n`string`\n##### offset\n`number`\n##### value\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nlength of the string after it was modified by the command\n#### Arg\nkey\n#### Arg\noffset\n#### Example\n```ts\nasync function setRangeExample(context: Devvit.Context) {\n  await context.redis.set('word', 'tacocat');\n  await context.redis.setRange('word', 0, 'blue');\n}\n```\n### strlen()\n**strlen**(`key`): `Promise`<`TxClientLike`\\>\nReturns the length of the string value stored at key. An error is returned when key holds a non-string value. [https://redis.io/commands/strlen/](https://redis.io/commands/strlen/)\n#### Parameters\n##### key\n`string`\n#### Returns",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "strlen()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, unwatch()</path>\n`Promise`<`TxClientLike`\\>\nlength of the string stored at key\n#### Deprecated\nUse [TxClientLike.strLen](#strlen-2) instead.\n#### Arg\nkey\n### strLen()\n**strLen**(`key`): `Promise`<`TxClientLike`\\>\nReturns the length of the string value stored at key. An error is returned when key holds a non-string value. [https://redis.io/commands/strlen/](https://redis.io/commands/strlen/)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nlength of the string stored at key\n#### Arg\nkey\n#### Example\n```ts\nasync function strLenExample(context: Devvit.Context) {\n  await context.redis.set('word', 'tacocat');\n  const length: number = await context.redis.strLen('word');\n  console.log('Length of word: ' + length);\n}\n```\n### type()\n**type**(`key`): `Promise`<`TxClientLike`\\>\nReturns the string representation of the type of the value stored at key [https://redis.io/commands/type/](https://redis.io/commands/type/)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nstring representation of the type\n#### Arg\nkey\n#### Example\n```ts\nasync function typeExample(context: Devvit.Context) {\n  await context.redis.set('quantity', '5');\n  const type: string = await context.redis.type('quantity');\n  console.log('Key type: ' + type);\n}\n```\n### unwatch()\n**unwatch**(): `Promise`<`TxClientLike`\\>\nFlushes all the previously watched keys for a transaction. If you call EXEC or DISCARD, there's no need to manually call UNWATCH. [https://redis.io/commands/unwatch/](https://redis.io/commands/unwatch/)\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Example",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "unwatch()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, zAdd()</path>\n```ts\nasync function unwatchExample(context: Devvit.Context) {\n  await context.redis.set('gold', '50');\n\n  const txn = await context.redis.watch('gold');\n\n  await txn.multi(); // Begin a transaction\n  await txn.incrBy('gold', 30);\n  await txn.unwatch(); // Unwatch \"gold\"\n\n  // Now that \"gold\" has been unwatched, we can increment its value\n  // outside the transaction without canceling the transaction\n  await context.redis.incrBy('gold', -20);\n\n  await txn.exec(); // Execute the commands in the transaction\n\n  console.log('Gold value: ' + (await context.redis.get('gold'))); // The value of 'gold' should be 50 + 30 - 20 = 60\n}\n```\n### watch()\n**watch**(...`keys`): `Promise`<`TxClientLike`\\>\nMarks the given keys to be watched for conditional execution of a transaction. [https://redis.io/commands/watch/](https://redis.io/commands/watch/)\n#### Parameters\n##### keys\n...`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkeys - given keys to be watched\n#### Example\n```ts\nasync function watchExample(context: Devvit.Context) {\n  await context.redis.set('karma', '32');\n\n  const txn = await context.redis.watch('quantity');\n\n  await txn.multi(); // Begin a transaction\n  await txn.incrBy('karma', 10);\n  await txn.exec(); // Execute the commands in the transaction\n}\n```\n### zAdd()\n**zAdd**(`key`, ...`members`): `Promise`<`TxClientLike`\\>\nAdds all the specified members with the specified scores to the sorted set stored at key. [https://redis.io/commands/zadd/](https://redis.io/commands/zadd/)\n#### Parameters\n##### key\n`string`\n##### members\n...[`ZMember`](ZMember.md)\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of elements added to the sorted set\n#### Arg\nkey\n#### Example",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "zAdd()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods</path>\n```ts\nasync function zAddExample(context: Devvit.Context) {\n  const numMembersAdded: number = await context.redis.zAdd(\n    'leaderboard',\n    { member: 'louis', score: 37 },\n    { member: 'fernando', score: 10 },\n    { member: 'caesar', score: 20 },\n    { member: 'alexander', score: 25 }\n  );\n  console.log('Number of members added: ' + numMembersAdded);\n}\n```\n### zCard()\n**zCard**(`key`): `Promise`<`TxClientLike`\\>\nReturns the cardinality (number of elements) of the sorted set stored at key. [https://redis.io/commands/zcard/](https://redis.io/commands/zcard/)\n#### Parameters\n##### key\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\ncardinality of the sorted set\n#### Arg\nkey\n#### Example\n```ts\nasync function zCardExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'leaderboard',\n    { member: 'louis', score: 37 },\n    { member: 'fernando', score: 10 },\n    { member: 'caesar', score: 20 },\n    { member: 'alexander', score: 25 }\n  );\n  const cardinality: number = await context.redis.zCard('leaderboard');\n  console.log('Cardinality: ' + cardinality);\n}\n```\n### zIncrBy()\n**zIncrBy**(`key`, `member`, `value`): `Promise`<`TxClientLike`\\>\nIncrements the score of member in the sorted set stored at key by value [https://redis.io/commands/zincrby/](https://redis.io/commands/zincrby/)\n#### Parameters\n##### key\n`string`\n##### member\n`string`\n##### value\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\nthe new score of member as a double precision floating point number\n#### Arg\nkey\n#### Arg\nmember\n#### Arg\nvalue\n#### Example\n```ts\nasync function zIncrByExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'animals',\n    { member: 'zebra', score: 92 },\n    { member: 'cat', score: 100 },\n    { member: 'dog', score: 95 },\n    { member: 'elephant', score: 97 }\n  );\n  const updatedScore: number = await context.redis.zIncrBy('animals', 'dog', 10);\n  console.log(\"Dog's updated score: \" + updatedScore);\n}\n```\n### zRange()",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, zRank()</path>\n**zRange**(`key`, `start`, `stop`, `options`?): `Promise`<`TxClientLike`\\>\nReturns the specified range of elements in the sorted set stored at key. [https://redis.io/commands/zrange/](https://redis.io/commands/zrange/)\nWhen using `by: 'lex'`, the start and stop inputs will be prepended with `[` by default, unless they already begin with `[`, `(` or are one of the special values `+` or `-`.\n#### Parameters\n##### key\n`string`\n##### start\n`string` | `number`\n##### stop\n`string` | `number`\n##### options?\n[`ZRangeOptions`](ZRangeOptions.md)\n#### Returns\n`Promise`<`TxClientLike`\\>\nlist of elements in the specified range\n#### Arg\nkey\n#### Arg\nstart\n#### Arg\nstop\n#### Arg\noptions\n#### Example\n```ts\nasync function zRangeExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'leaderboard',\n    { member: 'louis', score: 37 },\n    { member: 'fernando', score: 10 },\n    { member: 'caesar', score: 20 },\n    { member: 'alexander', score: 25 }\n  );\n\n  // View elements with scores between 0 and 30 inclusive, sorted by score\n  const scores: { member: string; score: number }[] = await context.redis.zRange(\n    'leaderboard',\n    0,\n    30,\n    { by: 'score' }\n  );\n\n  scores.forEach((x) => {\n    console.log('Member: ' + x.member, ', Score: ' + x.score);\n  });\n}\n```\n### zRank()\n**zRank**(`key`, `member`): `Promise`<`TxClientLike`\\>\nReturns the rank of member in the sorted set stored at key [https://redis.io/commands/zrank/](https://redis.io/commands/zrank/)\n#### Parameters\n##### key\n`string`\n##### member\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nrank of the member. The rank (or index) is 0-based which means that the member with the lowest score has rank 0\n#### Arg\nkey\n#### Arg\nmember\n#### Example",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "zRank()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, zRemRangeByLex()</path>\n```ts\nasync function zRankExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'animals',\n    { member: 'zebra', score: 92 },\n    { member: 'cat', score: 100 },\n    { member: 'dog', score: 95 },\n    { member: 'elephant', score: 97 }\n  );\n  const rank: number = await context.redis.zRank('animals', 'dog');\n  console.log(\"Dog's rank: \" + rank);\n}\n```\n### zRem()\n**zRem**(`key`, `members`): `Promise`<`TxClientLike`\\>\nRemoves the specified members from the sorted set stored at key. [https://redis.io/commands/zrem/](https://redis.io/commands/zrem/)\n#### Parameters\n##### key\n`string`\n##### members\n`string`\\[\\]\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of members removed from the sorted set\n#### Arg\nkey\n#### Arg\nmembers\n#### Example\n```ts\nasync function zRemExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'leaderboard',\n    { member: 'louis', score: 37 },\n    { member: 'fernando', score: 10 },\n    { member: 'caesar', score: 20 },\n    { member: 'alexander', score: 25 }\n  );\n  const numberOfMembersRemoved: number = await context.redis.zRem('leaderboard', [\n    'fernando',\n    'alexander',\n  ]);\n  console.log('Number of members removed: ' + numberOfMembersRemoved);\n}\n```\n### zRemRangeByLex()\n**zRemRangeByLex**(`key`, `min`, `max`): `Promise`<`TxClientLike`\\>\nremoves all elements in the sorted set stored at key between the lexicographical range specified by min and max [https://redis.io/commands/zremrangebylex/](https://redis.io/commands/zremrangebylex/)\n#### Parameters\n##### key\n`string`\n##### min\n`string`\n##### max\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of members removed from the sorted set\n#### Arg\nkey\n#### Arg\nmin\n#### Arg\nmax\n#### Example",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "zRemRangeByLex()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, zRemRangeByScore(), Parameters, max</path>\n```ts\nasync function zRemRangeByLexExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'fruits',\n    { member: 'kiwi', score: 0 },\n    { member: 'mango', score: 0 },\n    { member: 'banana', score: 0 },\n    { member: 'orange', score: 0 },\n    { member: 'apple', score: 0 }\n  );\n\n  // Remove fruits alphabetically ordered between 'kiwi' inclusive and 'orange' exclusive\n  // Note: The symbols '[' and '(' indicate inclusive or exclusive, respectively. These must be included in the call to zRemRangeByLex().\n  const numFieldsRemoved: number = await context.redis.zRemRangeByLex('fruits', '[kiwi', '(orange');\n  console.log('Number of fields removed: ' + numFieldsRemoved);\n}\n```\n### zRemRangeByRank()\n**zRemRangeByRank**(`key`, `start`, `stop`): `Promise`<`TxClientLike`\\>\nRemoves all elements in the sorted set stored at key with rank between start and stop. [https://redis.io/commands/zremrangebyrank/](https://redis.io/commands/zremrangebyrank/)\n#### Parameters\n##### key\n`string`\n##### start\n`number`\n##### stop\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of members removed from the sorted set\n#### Arg\nkey\n#### Arg\nstart\n#### Arg\nstop\n#### Example\n```\nasync function zRemRangeByRankExample(context: Devvit.Context) {\n await context.redis.zAdd(\"fruits\",\n   {member: \"kiwi\", score: 10},\n   {member: \"mango\", score: 20},\n   {member: \"banana\", score: 30},\n   {member: \"orange\", score: 40},\n   {member: \"apple\", score: 50},\n );\n\n // Remove fruits ranked 1 through 3 inclusive\n const numFieldsRemoved : number = await context.redis.zRemRangeByRank(\"fruits\", 1, 3);\n console.log(\"Number of fields removed: \" + numFieldsRemoved);\n}\n```\n### zRemRangeByScore()\n**zRemRangeByScore**(`key`, `min`, `max`): `Promise`<`TxClientLike`\\>\nRemoves all elements in the sorted set stored at key with a score between min and max [https://redis.io/commands/zremrangebyscore/](https://redis.io/commands/zremrangebyscore/)\n#### Parameters\n##### key\n`string`\n##### min\n`number`\n##### max\n`number`",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "zRemRangeByScore()",
        "Parameters",
        "max"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, zScore()</path>\n#### Returns\n`Promise`<`TxClientLike`\\>\nnumber of members removed from the sorted set\n#### Arg\nkey\n#### Arg\nmin\n#### Arg\nmax\n#### Example\n```ts\nasync function zRemRangeByScoreExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'fruits',\n    { member: 'kiwi', score: 10 },\n    { member: 'mango', score: 20 },\n    { member: 'banana', score: 30 },\n    { member: 'orange', score: 40 },\n    { member: 'apple', score: 50 }\n  );\n  // Remove fruits scored between 30 and 50 inclusive\n  const numFieldsRemoved: number = await context.redis.zRemRangeByScore('fruits', 30, 50);\n  console.log('Number of fields removed: ' + numFieldsRemoved);\n}\n```\n### zScan()\n**zScan**(`key`, `cursor`, `pattern`?, `count`?): `Promise`<`TxClientLike`\\>\nIterates elements of Sorted Set types and their associated scores.\n#### Parameters\n##### key\n`string`\n##### cursor\n`number`\n##### pattern?\n`string`\n##### count?\n`number`\n#### Returns\n`Promise`<`TxClientLike`\\>\n#### Arg\nkey\n#### Arg\ncursor\n#### Arg\npattern\n#### Arg\ncount\n#### Example\n```ts\nasync function zScanExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'fruits',\n    { member: 'kiwi', score: 0 },\n    { member: 'mango', score: 0 },\n    { member: 'banana', score: 0 },\n    { member: 'orange', score: 0 },\n    { member: 'apple', score: 0 }\n  );\n  const zScanResponse = await context.redis.zScan('fruits', 0);\n  console.log('zScanResponse: ' + JSON.stringify(zScanResponse));\n}\n```\n### zScore()\n**zScore**(`key`, `member`): `Promise`<`TxClientLike`\\>\nReturns the score of member in the sorted set at key. [https://redis.io/commands/zscore/](https://redis.io/commands/zscore/)\n#### Parameters\n##### key\n`string`\n##### member\n`string`\n#### Returns\n`Promise`<`TxClientLike`\\>\nthe score of the member (a double-precision floating point number).\n#### Arg\nkey\n#### Arg\nmember\n#### Example",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "zScore()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: TxClientLike, Methods, zScore(), Example</path>\n```ts\nasync function zScoreExample(context: Devvit.Context) {\n  await context.redis.zAdd(\n    'leaderboard',\n    { member: 'louis', score: 37 },\n    { member: 'fernando', score: 10 },\n    { member: 'caesar', score: 20 },\n    { member: 'alexander', score: 25 }\n  );\n  const score: number | undefined = await context.redis.zScore('leaderboard', 'caesar');\n  if (score !== undefined) {\n    console.log(\"Caesar's score: \" + score);\n  }\n}\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 4,
      "path": [
        "Type Alias: TxClientLike",
        "Methods",
        "zScore()",
        "Example"
      ]
    }
  }
]