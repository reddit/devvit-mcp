[
  {
    "pageContent": "<path>Class: Comment, Accessors, postId, Get Signature</path>\n[**@devvit/public-api v0.11.19-dev**](../../README.md)\n# Class: Comment\n## Accessors\n### approved\n#### Get Signature\n**get** **approved**(): `boolean`\n##### Returns\n`boolean`\n### approvedAtUtc\n#### Get Signature\n**get** **approvedAtUtc**(): `number`\nA number representing the UTC timestamp in seconds, or 0 if its not approved.\n##### Returns\n`number`\n### authorId\n#### Get Signature\n**get** **authorId**(): `undefined` | `` `t2_${string}` ``\n##### Returns\n`undefined` | `` `t2_${string}` ``\n### authorName\n#### Get Signature\n**get** **authorName**(): `string`\n##### Returns\n`string`\n### bannedAtUtc\n#### Get Signature\n**get** **bannedAtUtc**(): `number`\n##### Returns\n`number`\n### body\n#### Get Signature\n**get** **body**(): `string`\n##### Returns\n`string`\n### collapsedBecauseCrowdControl\n#### Get Signature\n**get** **collapsedBecauseCrowdControl**(): `boolean`\n##### Returns\n`boolean`\n### createdAt\n#### Get Signature\n**get** **createdAt**(): `Date`\n##### Returns\n`Date`\n### distinguishedBy\n#### Get Signature\n**get** **distinguishedBy**(): `undefined` | `string`\n##### Returns\n`undefined` | `string`\n### edited\n#### Get Signature\n**get** **edited**(): `boolean`\n##### Returns\n`boolean`\n### id\n#### Get Signature\n**get** **id**(): `` `t1_${string}` ``\n##### Returns\n`` `t1_${string}` ``\n### ignoringReports\n#### Get Signature\n**get** **ignoringReports**(): `boolean`\n##### Returns\n`boolean`\n### locked\n#### Get Signature\n**get** **locked**(): `boolean`\n##### Returns\n`boolean`\n### modReportReasons\n#### Get Signature\n**get** **modReportReasons**(): `string`\\[\\]\n##### Returns\n`string`\\[\\]\n### numReports\n#### Get Signature\n**get** **numReports**(): `number`\n##### Returns\n`number`\n### parentId\n#### Get Signature\n**get** **parentId**(): `` `t1_${string}` `` | `` `t3_${string}` ``\n##### Returns\n`` `t1_${string}` `` | `` `t3_${string}` ``\n### permalink\n#### Get Signature\n**get** **permalink**(): `string`\n##### Returns\n`string`\n### postId\n#### Get Signature",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Comment",
        "Accessors",
        "postId",
        "Get Signature"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Class: Comment, Methods, edit()</path>\n**get** **postId**(): `` `t3_${string}` ``\n##### Returns\n`` `t3_${string}` ``\n### removed\n#### Get Signature\n**get** **removed**(): `boolean`\n##### Returns\n`boolean`\n### replies\n#### Get Signature\n**get** **replies**(): [`Listing`](Listing.md)<`Comment`\\>\n##### Returns\n[`Listing`](Listing.md)<`Comment`\\>\n### score\n#### Get Signature\n**get** **score**(): `number`\n##### Returns\n`number`\n### spam\n#### Get Signature\n**get** **spam**(): `boolean`\n##### Returns\n`boolean`\n### stickied\n#### Get Signature\n**get** **stickied**(): `boolean`\n##### Returns\n`boolean`\n### subredditId\n#### Get Signature\n**get** **subredditId**(): `` `t5_${string}` ``\n##### Returns\n`` `t5_${string}` ``\n### subredditName\n#### Get Signature\n**get** **subredditName**(): `string`\n##### Returns\n`string`\n### url\n#### Get Signature\n**get** **url**(): `string`\n##### Returns\n`string`\n### userReportReasons\n#### Get Signature\n**get** **userReportReasons**(): `string`\\[\\]\n##### Returns\n`string`\\[\\]\n## Methods\n### addRemovalNote()\n**addRemovalNote**(`options`): `Promise`<`void`\\>\nAdd a mod note for why the comment was removed\n#### Parameters\n##### options\n###### modNote?\n`string`\nthe reason for removal (maximum 100 characters) (optional)\n###### reasonId\n`string`\nid of a Removal Reason - you can leave this as an empty string if you don't have one\n#### Returns\n`Promise`<`void`\\>\n### approve()\n**approve**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### delete()\n**delete**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### distinguish()\n**distinguish**(`makeSticky`): `Promise`<`void`\\>\n#### Parameters\n##### makeSticky\n`boolean` = `false`\n#### Returns\n`Promise`<`void`\\>\n### distinguishAsAdmin()\n**distinguishAsAdmin**(`makeSticky`): `Promise`<`void`\\>\n#### Parameters\n##### makeSticky\n`boolean` = `false`\n#### Returns\n`Promise`<`void`\\>\n### edit()\n**edit**(`options`): `Promise`<`Comment`\\>\n#### Parameters\n##### options\n[`CommentSubmissionOptions`](../type-aliases/CommentSubmissionOptions.md)\n#### Returns",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Comment",
        "Methods",
        "edit()"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: Comment, Methods, toJSON(), Returns</path>\n`Promise`<`Comment`\\>\n### getAuthor()\n**getAuthor**(): `Promise`<`undefined` | [`User`](User.md)\\>\n#### Returns\n`Promise`<`undefined` | [`User`](User.md)\\>\n### ignoreReports()\n**ignoreReports**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### isApproved()\n**isApproved**(): `boolean`\n#### Returns\n`boolean`\n### isDistinguished()\n**isDistinguished**(): `boolean`\n#### Returns\n`boolean`\n### isEdited()\n**isEdited**(): `boolean`\n#### Returns\n`boolean`\n### isIgnoringReports()\n**isIgnoringReports**(): `boolean`\n#### Returns\n`boolean`\n### isLocked()\n**isLocked**(): `boolean`\n#### Returns\n`boolean`\n### isRemoved()\n**isRemoved**(): `boolean`\n#### Returns\n`boolean`\n### isSpam()\n**isSpam**(): `boolean`\n#### Returns\n`boolean`\n### isStickied()\n**isStickied**(): `boolean`\n#### Returns\n`boolean`\n### lock()\n**lock**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### remove()\n**remove**(`isSpam`): `Promise`<`void`\\>\n#### Parameters\n##### isSpam\n`boolean` = `false`\n#### Returns\n`Promise`<`void`\\>\n### reply()\n**reply**(`options`): `Promise`<`Comment`\\>\n#### Parameters\n##### options\n[`CommentSubmissionOptions`](../type-aliases/CommentSubmissionOptions.md)\n#### Returns\n`Promise`<`Comment`\\>\n### toJSON()\n**toJSON**(): `Pick`<`Comment`, `\"subredditName\"` | `\"id\"` | `\"score\"` | `\"subredditId\"` | `\"postId\"` | `\"url\"` | `\"createdAt\"` | `\"permalink\"` | `\"authorName\"` | `\"body\"` | `\"approved\"` | `\"spam\"` | `\"stickied\"` | `\"removed\"` | `\"edited\"` | `\"locked\"` | `\"ignoringReports\"` | `\"distinguishedBy\"` | `\"userReportReasons\"` | `\"modReportReasons\"` | `\"parentId\"` | `\"replies\"` | `\"numReports\"` | `\"collapsedBecauseCrowdControl\"`\\>\n#### Returns",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Comment",
        "Methods",
        "toJSON()",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Comment, Methods, unlock(), Returns</path>\n`Pick`<`Comment`, `\"subredditName\"` | `\"id\"` | `\"score\"` | `\"subredditId\"` | `\"postId\"` | `\"url\"` | `\"createdAt\"` | `\"permalink\"` | `\"authorName\"` | `\"body\"` | `\"approved\"` | `\"spam\"` | `\"stickied\"` | `\"removed\"` | `\"edited\"` | `\"locked\"` | `\"ignoringReports\"` | `\"distinguishedBy\"` | `\"userReportReasons\"` | `\"modReportReasons\"` | `\"parentId\"` | `\"replies\"` | `\"numReports\"` | `\"collapsedBecauseCrowdControl\"`\\>\n### undistinguish()\n**undistinguish**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unignoreReports()\n**unignoreReports**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unlock()\n**unlock**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Comment",
        "Methods",
        "unlock()",
        "Returns"
      ],
      "level": 3
    }
  }
]