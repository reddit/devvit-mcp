[
  {
    "pageContent": "<path>Class: Subreddit, Accessors</path>\n[**@devvit/public-api v0.11.19-dev**](../../README.md)\n# Class: Subreddit\nA class representing a subreddit.\n## Accessors\n### createdAt\n#### Get Signature\n**get** **createdAt**(): `Date`\nThe creation date of the subreddit.\n##### Returns\n`Date`\n### description\n#### Get Signature\n**get** **description**(): `undefined` | `string`\nThe description of the subreddit.\n##### Returns\n`undefined` | `string`\n### id\n#### Get Signature\n**get** **id**(): `` `t5_${string}` ``\nThe ID (starting with t5\\_) of the subreddit to retrieve. e.g. t5\\_2qjpg\n##### Returns\n`` `t5_${string}` ``\n### language\n#### Get Signature\n**get** **language**(): `string`\nThe language of the subreddit.\n##### Returns\n`string`\n### name\n#### Get Signature\n**get** **name**(): `string`\nThe name of a subreddit omitting the r/.\n##### Returns\n`string`\n### nsfw\n#### Get Signature\n**get** **nsfw**(): `boolean`\nWhether the subreddit is marked as NSFW (Not Safe For Work).\n##### Returns\n`boolean`\n### numberOfActiveUsers\n#### Get Signature\n**get** **numberOfActiveUsers**(): `number`\nThe number of active users of the subreddit.\n##### Returns\n`number`\n### numberOfSubscribers\n#### Get Signature\n**get** **numberOfSubscribers**(): `number`\nThe number of subscribers of the subreddit.\n##### Returns\n`number`\n### permalink\n#### Get Signature\n**get** **permalink**(): `string`\nReturns a permalink path (R2 bug: subreddit.url is a permalink, and does not have a subreddit.permalink field)\n##### Returns\n`string`\n### postFlairsEnabled\n#### Get Signature\n**get** **postFlairsEnabled**(): `boolean`\nWhether the post flairs are enabled for this subreddit.\n##### Returns\n`boolean`\n### settings\n#### Get Signature\n**get** **settings**(): [`SubredditSettings`](../type-aliases/SubredditSettings.md)\nThe settings of the subreddit.\n##### Returns\n[`SubredditSettings`](../type-aliases/SubredditSettings.md)\n### title\n#### Get Signature\n**get** **title**(): `undefined` | `string`\nThe title of the subreddit.\n##### Returns\n`undefined` | `string`\n### type",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Subreddit",
        "Accessors"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Accessors, usersCanAssignUserFlairs, Get Signature, Returns</path>\n#### Get Signature\n**get** **type**(): [`SubredditType`](../type-aliases/SubredditType.md)\nThe type of subreddit (public, private, etc.).\n##### Returns\n[`SubredditType`](../type-aliases/SubredditType.md)\n### url\n#### Get Signature\n**get** **url**(): `string`\nReturns the HTTP URL for the subreddit. (R2 bug: subreddit.url is a permalink path and does not return a fully qualified URL in subreddit.url)\n##### Returns\n`string`\n### userFlairsEnabled\n#### Get Signature\n**get** **userFlairsEnabled**(): `boolean`\nWhether the user flairs are enabled for this subreddit.\n##### Returns\n`boolean`\n### usersCanAssignPostFlairs\n#### Get Signature\n**get** **usersCanAssignPostFlairs**(): `boolean`\nWhether the user can assign post flairs. This is only true if the post flairs are enabled.\n##### Returns\n`boolean`\n### usersCanAssignUserFlairs\n#### Get Signature\n**get** **usersCanAssignUserFlairs**(): `boolean`\nWhether the user can assign user flairs. This is only true if the user flairs are enabled.\n##### Returns\n`boolean`",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Class: Subreddit",
        "Accessors",
        "usersCanAssignUserFlairs",
        "Get Signature",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getBannedWikiContributors()</path>\n## Methods\n### addWikiContributor()\n**addWikiContributor**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### approveUser()\n**approveUser**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### banUser()\n**banUser**(`options`): `Promise`<`void`\\>\n#### Parameters\n##### options\n`Omit`<[`BanUserOptions`](../type-aliases/BanUserOptions.md), `\"subredditName\"`\\>\n#### Returns\n`Promise`<`void`\\>\n### banWikiContributor()\n**banWikiContributor**(`options`): `Promise`<`void`\\>\n#### Parameters\n##### options\n`Omit`<[`BanWikiContributorOptions`](../type-aliases/BanWikiContributorOptions.md), `\"subredditName\"`\\>\n#### Returns\n`Promise`<`void`\\>\n### createPostFlairTemplate()\n**createPostFlairTemplate**(`options`): `Promise`<[`FlairTemplate`](FlairTemplate.md)\\>\n#### Parameters\n##### options\n`Omit`<[`CreateFlairTemplateOptions`](../type-aliases/CreateFlairTemplateOptions.md), `\"subredditName\"`\\>\n#### Returns\n`Promise`<[`FlairTemplate`](FlairTemplate.md)\\>\n### createUserFlairTemplate()\n**createUserFlairTemplate**(`options`): `Promise`<[`FlairTemplate`](FlairTemplate.md)\\>\n#### Parameters\n##### options\n`Omit`<[`CreateFlairTemplateOptions`](../type-aliases/CreateFlairTemplateOptions.md), `\"subredditName\"`\\>\n#### Returns\n`Promise`<[`FlairTemplate`](FlairTemplate.md)\\>\n### getApprovedUsers()\n**getApprovedUsers**(`options`): [`Listing`](Listing.md)<[`User`](User.md)\\>\n#### Parameters\n##### options\n`GetUsersOptions` = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`User`](User.md)\\>\n### getBannedUsers()\n**getBannedUsers**(`options`): [`Listing`](Listing.md)<[`User`](User.md)\\>\n#### Parameters\n##### options\n`GetUsersOptions` = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`User`](User.md)\\>\n### getBannedWikiContributors()\n**getBannedWikiContributors**(`options`): [`Listing`](Listing.md)<[`User`](User.md)\\>\n#### Parameters\n##### options\n`GetUsersOptions` = `{}`\n#### Returns",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getBannedWikiContributors()"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getEdited(), Call Signature</path>\n[`Listing`](Listing.md)<[`User`](User.md)\\>\n### getCommentsAndPostsByIds()\n**getCommentsAndPostsByIds**(`ids`): [`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\nReturn a listing of things specified by their fullnames.\n#### Parameters\n##### ids\n`string`\\[\\]\nArray of thing full ids (e.g. t3\\_abc123)\n#### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\n#### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('askReddit');\nconst listing = subreddit.getCommentsAndPostsByIds(['t3_abc123', 't1_xyz123']);\nconst items = await listing.all();\nconsole.log(items); // [Post, Comment]\n```\n### getControversialPosts()\n**getControversialPosts**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\n#### Parameters\n##### options\n`Omit`<[`GetPostsOptionsWithTimeframe`](../type-aliases/GetPostsOptionsWithTimeframe.md), `\"subredditName\"`\\> = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n### getEdited()\n#### Call Signature\n**getEdited**(`options`): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nReturn a listing of things that have been edited recently.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"comment\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getEdited();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getEdited({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getEdited**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\nReturn a listing of things that have been edited recently.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"post\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n##### Example",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getEdited()",
        "Call Signature"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getModQueue(), Call Signature, Example</path>\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getEdited();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getEdited({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getEdited**(`options`?): [`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\nReturn a listing of things that have been edited recently.\n##### Parameters\n###### options?\n`AboutSubredditOptions`<`\"all\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getEdited();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getEdited({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getModerationLog()\n**getModerationLog**(`options`): [`Listing`](Listing.md)<[`ModAction`](../interfaces/ModAction.md)\\>\n#### Parameters\n##### options\n`GetModerationLogOptions`\n#### Returns\n[`Listing`](Listing.md)<[`ModAction`](../interfaces/ModAction.md)\\>\n### getModerators()\n**getModerators**(`options`): [`Listing`](Listing.md)<[`User`](User.md)\\>\n#### Parameters\n##### options\n`GetUsersOptions` = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`User`](User.md)\\>\n### getModQueue()\n#### Call Signature\n**getModQueue**(`options`): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nReturn a listing of things requiring moderator review, such as reported things and items.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"comment\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getModQueue();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getModQueue({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getModQueue()",
        "Call Signature",
        "Example"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getReports(), Call Signature</path>\n#### Call Signature\n**getModQueue**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\nReturn a listing of things requiring moderator review, such as reported things and items.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"post\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getModQueue();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getModQueue({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getModQueue**(`options`?): [`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\nReturn a listing of things requiring moderator review, such as reported things and items.\n##### Parameters\n###### options?\n`AboutSubredditOptions`<`\"all\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getModQueue();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getModQueue({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getMutedUsers()\n**getMutedUsers**(`options`): [`Listing`](Listing.md)<[`User`](User.md)\\>\n#### Parameters\n##### options\n`GetUsersOptions` = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`User`](User.md)\\>\n### getPostFlairTemplates()\n**getPostFlairTemplates**(): `Promise`<[`FlairTemplate`](FlairTemplate.md)\\[\\]>\n#### Returns\n`Promise`<[`FlairTemplate`](FlairTemplate.md)\\[\\]>\n### getReports()\n#### Call Signature\n**getReports**(`options`): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nReturn a listing of things that have been reported.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"comment\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n##### Example",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getReports()",
        "Call Signature"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getSpam(), Call Signature</path>\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getReports();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getReports({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getReports**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\nReturn a listing of things that have been reported.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"post\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getReports();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getReports({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getReports**(`options`?): [`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\nReturn a listing of things that have been reported.\n##### Parameters\n###### options?\n`AboutSubredditOptions`<`\"all\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getReports();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getReports({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getSpam()\n#### Call Signature\n**getSpam**(`options`): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nReturn a listing of things that have been marked as spam or otherwise removed.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"comment\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n##### Example",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getSpam()",
        "Call Signature"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getUnmoderated(), Call Signature, Parameters</path>\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getSpam();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getSpam({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getSpam**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\nReturn a listing of things that have been marked as spam or otherwise removed.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"post\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getSpam();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getSpam({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getSpam**(`options`?): [`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\nReturn a listing of things that have been marked as spam or otherwise removed.\n##### Parameters\n###### options?\n`AboutSubredditOptions`<`\"all\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getSpam();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getSpam({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getTopPosts()\n**getTopPosts**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\n#### Parameters\n##### options\n`Omit`<[`GetPostsOptionsWithTimeframe`](../type-aliases/GetPostsOptionsWithTimeframe.md), `\"subredditName\"`\\> = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n### getUnmoderated()\n#### Call Signature\n**getUnmoderated**(`options`): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nReturn a listing of things that have yet to be approved/removed by a mod.\n##### Parameters",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getUnmoderated()",
        "Call Signature",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, getUserFlair()</path>\n###### options\n`AboutSubredditOptions`<`\"comment\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getUnmoderated();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getUnmoderated({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getUnmoderated**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\nReturn a listing of things that have yet to be approved/removed by a mod.\n##### Parameters\n###### options\n`AboutSubredditOptions`<`\"post\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getUnmoderated();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getUnmoderated({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n#### Call Signature\n**getUnmoderated**(`options`?): [`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\nReturn a listing of things that have yet to be approved/removed by a mod.\n##### Parameters\n###### options?\n`AboutSubredditOptions`<`\"all\"`\\>\n##### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md) | [`Comment`](Comment.md)\\>\n##### Example\n```ts\nconst subreddit = await reddit.getSubredditByName('mysubreddit');\nlet listing = await subreddit.getUnmoderated();\nconsole.log('Posts and Comments: ', await listing.all());\nlisting = await subreddit.getUnmoderated({ type: 'post' });\nconsole.log('Posts: ', await listing.all());\n```\n### getUserFlair()\n**getUserFlair**(`options`?): `Promise`<[`GetUserFlairBySubredditResponse`](../type-aliases/GetUserFlairBySubredditResponse.md)\\>",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "getUserFlair()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods</path>\nGet the user flair for the given subreddit. If `usernames` is provided then it will return only the flair for the specified users. If retrieving the list of flair for a given subreddit and the list is long then this method will return a `next` field which can be passed into the `after` field on the next call to retrieve the next slice of data. To retrieve the previous slice of data pass the `prev` field into the `before` field during the subsequent call.\n#### Parameters\n##### options?\n[`GetUserFlairOptions`](../type-aliases/GetUserFlairOptions.md)\nSee interface\n#### Returns\n`Promise`<[`GetUserFlairBySubredditResponse`](../type-aliases/GetUserFlairBySubredditResponse.md)\\>\n#### Examples\n```ts\nconst subredditName = 'mysubreddit';\nconst subreddit = await reddit.getSubredditByName(subredditName);\nconst response = await subreddit.getUserFlair();\nconst userFlairList = response.users;\n```\n```ts\nconst response = await subreddit.getUserFlair({ after: 't2_awefae' });\nconst userFlairList = response.users;\n```\n```ts\nconst response = await subreddit.getUserFlair({ usernames: ['toxictoad', 'badapple'] });\nconst userFlairList = response.users;\n```\n### getUserFlairTemplates()\n**getUserFlairTemplates**(): `Promise`<[`FlairTemplate`](FlairTemplate.md)\\[\\]>\n#### Returns\n`Promise`<[`FlairTemplate`](FlairTemplate.md)\\[\\]>\n### getWikiContributors()\n**getWikiContributors**(`options`): [`Listing`](Listing.md)<[`User`](User.md)\\>\n#### Parameters\n##### options\n`GetUsersOptions` = `{}`\n#### Returns\n[`Listing`](Listing.md)<[`User`](User.md)\\>\n### inviteModerator()\n**inviteModerator**(`username`, `permissions`?): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n##### permissions?\n[`ModeratorPermission`](../type-aliases/ModeratorPermission.md)\\[\\]\n#### Returns\n`Promise`<`void`\\>\n### muteUser()\n**muteUser**(`username`, `note`?): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n##### note?\n`string`\n#### Returns\n`Promise`<`void`\\>\n### removeModerator()",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: Subreddit",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Subreddit, Methods, unmuteUser(), Returns</path>\n**removeModerator**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### removeUser()\n**removeUser**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### removeWikiContributor()\n**removeWikiContributor**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### revokeModeratorInvite()\n**revokeModeratorInvite**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### setModeratorPermissions()\n**setModeratorPermissions**(`username`, `permissions`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n##### permissions\n[`ModeratorPermission`](../type-aliases/ModeratorPermission.md)\\[\\]\n#### Returns\n`Promise`<`void`\\>\n### submitPost()\n**submitPost**(`options`): `Promise`<[`Post`](Post.md)\\>\n#### Parameters\n##### options\n[`SubmitLinkOptions`](../type-aliases/SubmitLinkOptions.md) | [`SubmitSelfPostOptions`](../type-aliases/SubmitSelfPostOptions.md)\n#### Returns\n`Promise`<[`Post`](Post.md)\\>\n### toJSON()\n**toJSON**(): `Pick`<`Subreddit`, `\"description\"` | `\"type\"` | `\"id\"` | `\"name\"` | `\"title\"` | `\"settings\"` | `\"createdAt\"` | `\"language\"` | `\"numberOfSubscribers\"` | `\"numberOfActiveUsers\"` | `\"nsfw\"`\\>\n#### Returns\n`Pick`<`Subreddit`, `\"description\"` | `\"type\"` | `\"id\"` | `\"name\"` | `\"title\"` | `\"settings\"` | `\"createdAt\"` | `\"language\"` | `\"numberOfSubscribers\"` | `\"numberOfActiveUsers\"` | `\"nsfw\"`\\>\n### unbanUser()\n**unbanUser**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### unbanWikiContributor()\n**unbanWikiContributor**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>\n### unmuteUser()\n**unmuteUser**(`username`): `Promise`<`void`\\>\n#### Parameters\n##### username\n`string`\n#### Returns\n`Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Subreddit",
        "Methods",
        "unmuteUser()",
        "Returns"
      ],
      "level": 3
    }
  }
]