[
  {
    "pageContent": "<path>Class: Post, Accessors, id, Get Signature, Returns</path>\n[**@devvit/public-api v0.11.19-dev**](../../README.md)\n# Class: Post\n## Accessors\n### approved\n#### Get Signature\n**get** **approved**(): `boolean`\n##### Returns\n`boolean`\n### approvedAtUtc\n#### Get Signature\n**get** **approvedAtUtc**(): `number`\n##### Returns\n`number`\n### archived\n#### Get Signature\n**get** **archived**(): `boolean`\n##### Returns\n`boolean`\n### authorId\n#### Get Signature\n**get** **authorId**(): `undefined` | `` `t2_${string}` ``\n##### Returns\n`undefined` | `` `t2_${string}` ``\n### authorName\n#### Get Signature\n**get** **authorName**(): `string`\n##### Returns\n`string`\n### bannedAtUtc\n#### Get Signature\n**get** **bannedAtUtc**(): `number`\n##### Returns\n`number`\n### body\n#### Get Signature\n**get** **body**(): `undefined` | `string`\n##### Returns\n`undefined` | `string`\n### bodyHtml\n#### Get Signature\n**get** **bodyHtml**(): `undefined` | `string`\n##### Returns\n`undefined` | `string`\n### comments\n#### Get Signature\n**get** **comments**(): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n##### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\n### createdAt\n#### Get Signature\n**get** **createdAt**(): `Date`\n##### Returns\n`Date`\n### distinguishedBy\n#### Get Signature\n**get** **distinguishedBy**(): `undefined` | `string`\n##### Returns\n`undefined` | `string`\n### edited\n#### Get Signature\n**get** **edited**(): `boolean`\n##### Returns\n`boolean`\n### flair\n#### Get Signature\n**get** **flair**(): `undefined` | [`LinkFlair`](../type-aliases/LinkFlair.md)\n##### Returns\n`undefined` | [`LinkFlair`](../type-aliases/LinkFlair.md)\n### gallery\n#### Get Signature\n**get** **gallery**(): [`GalleryMedia`](../type-aliases/GalleryMedia.md)\\[\\]\nGet the media in the post. Empty if the post doesn't have any media.\n##### Returns\n[`GalleryMedia`](../type-aliases/GalleryMedia.md)\\[\\]\n### hidden\n#### Get Signature\n**get** **hidden**(): `boolean`\n##### Returns\n`boolean`\n### id\n#### Get Signature\n**get** **id**(): `` `t3_${string}` ``\n##### Returns\n`` `t3_${string}` ``",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Post",
        "Accessors",
        "id",
        "Get Signature",
        "Returns"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Class: Post, Accessors, secureMedia, Get Signature, Returns</path>\n### ignoringReports\n#### Get Signature\n**get** **ignoringReports**(): `boolean`\n##### Returns\n`boolean`\n### locked\n#### Get Signature\n**get** **locked**(): `boolean`\n##### Returns\n`boolean`\n### modReportReasons\n#### Get Signature\n**get** **modReportReasons**(): `string`\\[\\]\n##### Returns\n`string`\\[\\]\n### nsfw\n#### Get Signature\n**get** **nsfw**(): `boolean`\n##### Returns\n`boolean`\n### numberOfComments\n#### Get Signature\n**get** **numberOfComments**(): `number`\n##### Returns\n`number`\n### numberOfReports\n#### Get Signature\n**get** **numberOfReports**(): `number`\n##### Returns\n`number`\n### permalink\n#### Get Signature\n**get** **permalink**(): `string`\n##### Returns\n`string`\n### quarantined\n#### Get Signature\n**get** **quarantined**(): `boolean`\n##### Returns\n`boolean`\n### removed\n#### Get Signature\n**get** **removed**(): `boolean`\n##### Returns\n`boolean`\n### removedBy\n#### Get Signature\n**get** **removedBy**(): `undefined` | `string`\nWho removed this object (username)\n##### Returns\n`undefined` | `string`\n### removedByCategory\n#### Get Signature\n**get** **removedByCategory**(): `undefined` | `string`\nwho/what removed this object. It will return one of the following:\n-   \"anti\\_evil\\_ops\": object is removed by a aeops member\n-   \"author\": object is removed by author of the post\n-   \"automod\\_filtered\": object is filtered by automod\n-   \"community\\_ops\": object is removed by a community team member\n-   \"content\\_takedown\": object is removed due to content violation\n-   \"copyright\\_takedown\": object is removed due to copyright violation\n-   \"deleted\": object is deleted\n-   \"moderator\": object is removed by a mod of the sub\n-   \"reddit\": object is removed by anyone else\n-   undefined: object is not removed\n##### Returns\n`undefined` | `string`\n### score\n#### Get Signature\n**get** **score**(): `number`\n##### Returns\n`number`\n### secureMedia\n#### Get Signature\n**get** **secureMedia**(): `undefined` | [`SecureMedia`](../type-aliases/SecureMedia.md)\n##### Returns",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Class: Post",
        "Accessors",
        "secureMedia",
        "Get Signature",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Post, Accessors, userReportReasons, Get Signature, Returns</path>\n`undefined` | [`SecureMedia`](../type-aliases/SecureMedia.md)\n### spam\n#### Get Signature\n**get** **spam**(): `boolean`\n##### Returns\n`boolean`\n### spoiler\n#### Get Signature\n**get** **spoiler**(): `boolean`\n##### Returns\n`boolean`\n### stickied\n#### Get Signature\n**get** **stickied**(): `boolean`\n##### Returns\n`boolean`\n### subredditId\n#### Get Signature\n**get** **subredditId**(): `` `t5_${string}` ``\n##### Returns\n`` `t5_${string}` ``\n### subredditName\n#### Get Signature\n**get** **subredditName**(): `string`\n##### Returns\n`string`\n### thumbnail\n#### Get Signature\n**get** **thumbnail**(): `undefined` | { `height`: `number`; `url`: `string`; `width`: `number`; }\n##### Returns\n`undefined` | { `height`: `number`; `url`: `string`; `width`: `number`; }\n### title\n#### Get Signature\n**get** **title**(): `string`\n##### Returns\n`string`\n### url\n#### Get Signature\n**get** **url**(): `string`\n##### Returns\n`string`\n### userReportReasons\n#### Get Signature\n**get** **userReportReasons**(): `string`\\[\\]\n##### Returns\n`string`\\[\\]",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Post",
        "Accessors",
        "userReportReasons",
        "Get Signature",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods, getEnrichedThumbnail(), Throws</path>\n## Methods\n### addComment()\n**addComment**(`options`): `Promise`<[`Comment`](Comment.md)\\>\n#### Parameters\n##### options\n[`CommentSubmissionOptions`](../type-aliases/CommentSubmissionOptions.md)\n#### Returns\n`Promise`<[`Comment`](Comment.md)\\>\n### addRemovalNote()\n**addRemovalNote**(`options`): `Promise`<`void`\\>\nAdd a mod note for why the post was removed\n#### Parameters\n##### options\n###### modNote?\n`string`\nthe reason for removal (maximum 100 characters) (optional)\n###### reasonId\n`string`\nid of a Removal Reason - you can leave this as an empty string if you don't have one\n#### Returns\n`Promise`<`void`\\>\n### approve()\n**approve**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### crosspost()\n**crosspost**(`options`): `Promise`<`Post`\\>\n#### Parameters\n##### options\n`Omit`<[`CrosspostOptions`](../type-aliases/CrosspostOptions.md), `\"postId\"`\\>\n#### Returns\n`Promise`<`Post`\\>\n### delete()\n**delete**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### distinguish()\n**distinguish**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### distinguishAsAdmin()\n**distinguishAsAdmin**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### edit()\n**edit**(`options`): `Promise`<`void`\\>\n#### Parameters\n##### options\n[`PostTextOptions`](../type-aliases/PostTextOptions.md)\n#### Returns\n`Promise`<`void`\\>\n### getAuthor()\n**getAuthor**(): `Promise`<`undefined` | [`User`](User.md)\\>\n#### Returns\n`Promise`<`undefined` | [`User`](User.md)\\>\n### getEnrichedThumbnail()\n**getEnrichedThumbnail**(): `Promise`<`undefined` | [`EnrichedThumbnail`](../type-aliases/EnrichedThumbnail.md)\\>\nGet a thumbnail that contains a preview image and also contains a blurred preview for NSFW images. The thumbnail returned has higher resolution than Post.thumbnail. Returns undefined if the post doesn't have a thumbnail\n#### Returns\n`Promise`<`undefined` | [`EnrichedThumbnail`](../type-aliases/EnrichedThumbnail.md)\\>\n#### Throws\nThrows an error if the thumbnail could not be fetched",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Class: Post",
        "Methods",
        "getEnrichedThumbnail()",
        "Throws"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods, setCustomPostPreview()</path>\n#### Example\n```ts\n// from a menu action, form, scheduler, trigger, custom post click event, etc\nconst post = await context.reddit.getPostById(context.postId);\nconst enrichedThumbnail = await post.getEnrichedThumbnail();\n```\n### hide()\n**hide**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### ignoreReports()\n**ignoreReports**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### isApproved()\n**isApproved**(): `boolean`\n#### Returns\n`boolean`\n### isArchived()\n**isArchived**(): `boolean`\n#### Returns\n`boolean`\n### isDistinguishedBy()\n**isDistinguishedBy**(): `undefined` | `string`\n#### Returns\n`undefined` | `string`\n### isEdited()\n**isEdited**(): `boolean`\n#### Returns\n`boolean`\n### isHidden()\n**isHidden**(): `boolean`\n#### Returns\n`boolean`\n### isIgnoringReports()\n**isIgnoringReports**(): `boolean`\n#### Returns\n`boolean`\n### isLocked()\n**isLocked**(): `boolean`\n#### Returns\n`boolean`\n### isNsfw()\n**isNsfw**(): `boolean`\n#### Returns\n`boolean`\n### isQuarantined()\n**isQuarantined**(): `boolean`\n#### Returns\n`boolean`\n### isRemoved()\n**isRemoved**(): `boolean`\n#### Returns\n`boolean`\n### isSpam()\n**isSpam**(): `boolean`\n#### Returns\n`boolean`\n### isSpoiler()\n**isSpoiler**(): `boolean`\n#### Returns\n`boolean`\n### isStickied()\n**isStickied**(): `boolean`\n#### Returns\n`boolean`\n### lock()\n**lock**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### markAsNsfw()\n**markAsNsfw**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### markAsSpoiler()\n**markAsSpoiler**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### remove()\n**remove**(`isSpam`): `Promise`<`void`\\>\n#### Parameters\n##### isSpam\n`boolean` = `false`\n#### Returns\n`Promise`<`void`\\>\n### setCustomPostPreview()\n**setCustomPostPreview**(`ui`): `Promise`<`void`\\>\nSet a lightweight UI that shows while the custom post renders\n#### Parameters\n##### ui\n`ComponentFunction`\nA JSX component function that returns a simple ui to be rendered.\n#### Returns\n`Promise`<`void`\\>\n#### Throws",
    "metadata": {
      "type": [
        "heading",
        "code",
        "text"
      ],
      "path": [
        "Class: Post",
        "Methods",
        "setCustomPostPreview()"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods</path>\nThrows an error if the preview could not be set.\n#### Example\n```ts\nconst preview = (\n  <vstack height=\"100%\" width=\"100%\" alignment=\"middle center\">\n    <text size=\"large\">An updated preview!</text>\n  </vstack>\n);\nconst post = await reddit.getPostById(context.postId);\nawait post.setCustomPostPreview(() => preview);\n```\n### setSuggestedCommentSort()\n**setSuggestedCommentSort**(`suggestedSort`): `Promise`<`void`\\>\nSet the suggested sort for comments on a Post.\n#### Parameters\n##### suggestedSort\n[`PostSuggestedCommentSort`](../type-aliases/PostSuggestedCommentSort.md)\n#### Returns\n`Promise`<`void`\\>\n#### Throws\nThrows an error if the suggested sort could not be set.\n#### Example\n```ts\nconst post = await reddit.getPostById(context.postId);\nawait post.setSuggestedCommentSort('NEW');\n```\n### setTextFallback()\n**setTextFallback**(`options`): `Promise`<`void`\\>\nSet a text fallback for the custom post\n#### Parameters\n##### options\n[`CustomPostTextFallbackOptions`](../type-aliases/CustomPostTextFallbackOptions.md)\nA text or a richtext to render in a fallback\n#### Returns\n`Promise`<`void`\\>\n#### Throws\nThrows an error if the fallback could not be set.\n#### Example\n```ts\n// from a menu action, form, scheduler, trigger, custom post click event, etc\nconst newTextFallback = { text: 'This is an updated text fallback' };\nconst post = await context.reddit.getPostById(context.postId);\nawait post.setTextFallback(newTextFallback);\n```\n### sticky()\n**sticky**(`position`?): `Promise`<`void`\\>\n#### Parameters\n##### position?\n`1` | `2` | `3` | `4`\n#### Returns\n`Promise`<`void`\\>\n### toJSON()",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: Post",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods, unsticky(), Returns</path>\n**toJSON**(): `Pick`<`Post`, `\"spoiler\"` | `\"subredditName\"` | `\"flair\"` | `\"id\"` | `\"score\"` | `\"title\"` | `\"subredditId\"` | `\"url\"` | `\"createdAt\"` | `\"nsfw\"` | `\"permalink\"` | `\"authorId\"` | `\"authorName\"` | `\"body\"` | `\"bodyHtml\"` | `\"thumbnail\"` | `\"numberOfComments\"` | `\"numberOfReports\"` | `\"approved\"` | `\"spam\"` | `\"stickied\"` | `\"removed\"` | `\"removedBy\"` | `\"removedByCategory\"` | `\"archived\"` | `\"edited\"` | `\"locked\"` | `\"quarantined\"` | `\"hidden\"` | `\"ignoringReports\"` | `\"distinguishedBy\"` | `\"secureMedia\"` | `\"userReportReasons\"` | `\"modReportReasons\"`\\>\n#### Returns\n`Pick`<`Post`, `\"spoiler\"` | `\"subredditName\"` | `\"flair\"` | `\"id\"` | `\"score\"` | `\"title\"` | `\"subredditId\"` | `\"url\"` | `\"createdAt\"` | `\"nsfw\"` | `\"permalink\"` | `\"authorId\"` | `\"authorName\"` | `\"body\"` | `\"bodyHtml\"` | `\"thumbnail\"` | `\"numberOfComments\"` | `\"numberOfReports\"` | `\"approved\"` | `\"spam\"` | `\"stickied\"` | `\"removed\"` | `\"removedBy\"` | `\"removedByCategory\"` | `\"archived\"` | `\"edited\"` | `\"locked\"` | `\"quarantined\"` | `\"hidden\"` | `\"ignoringReports\"` | `\"distinguishedBy\"` | `\"secureMedia\"` | `\"userReportReasons\"` | `\"modReportReasons\"`\\>\n### undistinguish()\n**undistinguish**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unhide()\n**unhide**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unignoreReports()\n**unignoreReports**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unlock()\n**unlock**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unmarkAsNsfw()\n**unmarkAsNsfw**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unmarkAsSpoiler()\n**unmarkAsSpoiler**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unsticky()\n**unsticky**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Post",
        "Methods",
        "unsticky()",
        "Returns"
      ],
      "level": 3
    }
  }
]