[
  {
    "pageContent": "<path>Class: User, Accessors, username, Get Signature, Returns</path>\n[**@devvit/public-api v0.11.19-dev**](../../README.md)\n# Class: User\nA class representing a user.\n## Accessors\n### commentKarma\n#### Get Signature\n**get** **commentKarma**(): `number`\nThe amount of comment karma the user has.\n##### Returns\n`number`\n### createdAt\n#### Get Signature\n**get** **createdAt**(): `Date`\nThe date the user was created.\n##### Returns\n`Date`\n### hasVerifiedEmail\n#### Get Signature\n**get** **hasVerifiedEmail**(): `boolean`\nIndicates whether or not the user has verified their email address.\n##### Returns\n`boolean`\n### id\n#### Get Signature\n**get** **id**(): `` `t2_${string}` ``\nThe ID (starting with t2\\_) of the user to retrieve.\n##### Example\n```ts\n't2_1w72';\n```\n##### Returns\n`` `t2_${string}` ``\n### isAdmin\n#### Get Signature\n**get** **isAdmin**(): `boolean`\nWhether the user is admin.\n##### Returns\n`boolean`\n### linkKarma\n#### Get Signature\n**get** **linkKarma**(): `number`\nThe amount of link karma the user has.\n##### Returns\n`number`\n### modPermissions\n#### Get Signature\n**get** **modPermissions**(): `Map`<`string`, [`ModeratorPermission`](../type-aliases/ModeratorPermission.md)\\[\\]>\nThe permissions the user has on the subreddit.\n##### Returns\n`Map`<`string`, [`ModeratorPermission`](../type-aliases/ModeratorPermission.md)\\[\\]>\n### nsfw\n#### Get Signature\n**get** **nsfw**(): `boolean`\nWhether the user's profile is marked as NSFW (Not Safe For Work).\n##### Returns\n`boolean`\n### permalink\n#### Get Signature\n**get** **permalink**(): `string`\nReturns a permalink path relative to [https://www.reddit.com](https://www.reddit.com)\n##### Returns\n`string`\n### url\n#### Get Signature\n**get** **url**(): `string`\nReturns the HTTP URL for the user\n##### Returns\n`string`\n### username\n#### Get Signature\n**get** **username**(): `string`\nThe username of the user omitting the u/.\n##### Example\n```ts\n'spez';\n```\n##### Returns\n`string`",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: User",
        "Accessors",
        "username",
        "Get Signature",
        "Returns"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Class: User, Methods, getUserFlairBySubreddit()</path>\n## Methods\n### getComments()\n**getComments**(`options`): [`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nGet the user's comments.\n#### Parameters\n##### options\n`Omit`<[`GetCommentsByUserOptions`](../type-aliases/GetCommentsByUserOptions.md), `\"username\"`\\>\nOptions for the request\n#### Returns\n[`Listing`](Listing.md)<[`Comment`](Comment.md)\\>\nA Listing of Comment objects.\n### getModPermissionsForSubreddit()\n**getModPermissionsForSubreddit**(`subredditName`): `Promise`<[`ModeratorPermission`](../type-aliases/ModeratorPermission.md)\\[\\]>\nGet the mod permissions the user has on the subreddit if they are a moderator.\n#### Parameters\n##### subredditName\n`string`\nname of the subreddit\n#### Returns\n`Promise`<[`ModeratorPermission`](../type-aliases/ModeratorPermission.md)\\[\\]>\nthe moderator permissions the user has on the subreddit\n### getPosts()\n**getPosts**(`options`): [`Listing`](Listing.md)<[`Post`](Post.md)\\>\nGet the user's posts.\n#### Parameters\n##### options\n`Omit`<[`GetPostsByUserOptions`](../type-aliases/GetPostsByUserOptions.md), `\"username\"`\\>\nOptions for the request\n#### Returns\n[`Listing`](Listing.md)<[`Post`](Post.md)\\>\nA Listing of Post objects.\n### getSnoovatarUrl()\n**getSnoovatarUrl**(): `Promise`<`undefined` | `string`\\>\n#### Returns\n`Promise`<`undefined` | `string`\\>\n### getSocialLinks()\n**getSocialLinks**(): `Promise`<[`UserSocialLink`](../type-aliases/UserSocialLink.md)\\[\\]>\nGets social links of the user\n#### Returns\n`Promise`<[`UserSocialLink`](../type-aliases/UserSocialLink.md)\\[\\]>\nA Promise that resolves an Array of UserSocialLink objects\n#### Example\n```ts\nconst socialLinks = await user.getSocialLinks();\n```\n### getUserFlairBySubreddit()\n**getUserFlairBySubreddit**(`subreddit`): `Promise`<`undefined` | [`UserFlair`](../type-aliases/UserFlair.md)\\>\nRetrieve the user's flair for the subreddit.\n#### Parameters\n##### subreddit\n`string`\nThe name of the subreddit associated with the user's flair.\n#### Returns",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: User",
        "Methods",
        "getUserFlairBySubreddit()"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: User, Methods, toJSON(), Returns</path>\n`Promise`<`undefined` | [`UserFlair`](../type-aliases/UserFlair.md)\\>\n#### Example\n```ts\nconst username = 'badapple';\nconst subredditName = 'mysubreddit';\nconst user = await reddit.getUserByUsername(username);\nconst userFlair = await user.getUserFlairBySubreddit(subredditName);\n```\n### toJSON()\n**toJSON**(): `Pick`<`User`, `\"username\"` | `\"id\"` | `\"createdAt\"` | `\"nsfw\"` | `\"linkKarma\"` | `\"commentKarma\"`\\> & `object`\n#### Returns\n`Pick`<`User`, `\"username\"` | `\"id\"` | `\"createdAt\"` | `\"nsfw\"` | `\"linkKarma\"` | `\"commentKarma\"`\\> & `object`",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Class: User",
        "Methods",
        "toJSON()",
        "Returns"
      ],
      "level": 3
    }
  }
]