[
  {
    "pageContent": "<path>Type Alias: ContextAPIClients, Properties, uiEnvironment?</path>\n[**@devvit/public-api v0.11.19-dev**](../README.md)\n# Type Alias: ContextAPIClients\n**ContextAPIClients** = `object`\n## Properties\n### assets\n**assets**: `AssetsClient`\nA client for resolving static assets to public URLs\n### cache\n**cache**: `CacheHelper`\n**`Experimental`**\nThe cache helper will let you cache JSON-able objects in your devvit apps for a limited amount of time.\nUnder the covers, It's just Redis, so you do need to enable the redis feature. This provides a pattern for e.g. fetching remote calls without overwhelming someone's server.\n```ts\nDevvit.configure({\n  redis: true, // Enable access to Redis\n});\n\n/// ...\n\nlet component = (context) => {\n  let cached = context.cache(async () => {\n    let rsp = await fetch(\"https://google.com\")\n    return rsp.body\n  },\n  {\n    key: \"some-fetch\",\n    ttl: 10_000 // millis\n  }\n  doSomethingWith(cached);\n  return <text>yay</text>\n}\n```\n### dimensions?\n`optional` **dimensions**: `UIDimensions`\n**`Experimental`**\nInformation about about a custom post's layout. Will be undefined for non custom post surface areas such as menu items and task schedulers.\n### kvStore\n**kvStore**: [`KVStore`](KVStore.md)\nA client for the Key Value Store\n### media\n**media**: [`MediaPlugin`](MediaPlugin.md)\nA client for media API\n### modLog\n**modLog**: `ModLogClient`\nA client for the ModLog API\n### realtime\n**realtime**: `RealtimeClient`\nA client for Realtime API\n### reddit\n**reddit**: `RedditAPIClient`\nA client for the Reddit API\n### redis\n**redis**: [`RedisClient`](RedisClient.md)\nA client for the Redis API\n### scheduler\n**scheduler**: [`Scheduler`](Scheduler.md)\nA client for the Scheduler API\n### settings\n**settings**: [`SettingsClient`](SettingsClient.md)\nA client for the Settings API\n### ui\n**ui**: [`UIClient`](UIClient.md)\nA client for the User Interface API\n### uiEnvironment?\n`optional` **uiEnvironment**: `UIEnvironment`\n**`Experimental`**",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: ContextAPIClients",
        "Properties",
        "uiEnvironment?"
      ],
      "level": 0
    }
  },
  {
    "pageContent": "<path>Type Alias: ContextAPIClients, Properties, useInterval, Deprecated</path>\nAdditional information about client environment. Will be undefined for non-ui contexts such as task schedulers or triggers.\n### useChannel()\n**useChannel**: <`Message`\\>(`options`) => [`UseChannelResult`](UseChannelResult.md)<`Message`\\>\nA hook for managing a realtime pubsub channel between Block renders. This is only available within a Block Component.\n#### Type Parameters\n##### Message\n`Message` _extends_ [`JSONValue`](JSONValue.md) = [`JSONValue`](JSONValue.md)\n#### Parameters\n##### options\n`ChannelOptions`<`Message`\\>\n#### Returns\n[`UseChannelResult`](UseChannelResult.md)<`Message`\\>\n#### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.\n```ts\n// Old:\nconst channel = context.useChannel(...);\n\n// New:\nimport { useChannel } from '@devvit/public-api'\n\nconst channel = useChannel(...);\n```\n### useForm()\n**useForm**: <`T`\\>(`form`, `onSubmit`) => [`FormKey`](FormKey.md)\nA hook for managing a form between Block renders. This is only available within a Block Component.\n#### Type Parameters\n##### T\n`T` _extends_ [`Form`](Form.md) | [`FormFunction`](FormFunction.md) = [`Form`](Form.md) | [`FormFunction`](FormFunction.md)\n#### Parameters\n##### form\n`T`\n##### onSubmit\n(`values`) => `void` | `Promise`<`void`\\>\n#### Returns\n[`FormKey`](FormKey.md)\n#### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.\n```ts\n// Old:\nconst myForm = context.useForm(...);\n\n// New:\nimport { useForm } from '@devvit/public-api'\n\nconst myForm = useForm(...);\n```\n### useInterval\n**useInterval**: [`UseIntervalHook`](UseIntervalHook.md)\nA hook for managing a callback that runs on an interval between Block renders. This is only available within a Block Component.\n#### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Type Alias: ContextAPIClients",
        "Properties",
        "useInterval",
        "Deprecated"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Type Alias: ContextAPIClients, Methods, useState(), Call Signature, Deprecated</path>\n```ts\n// Old:\nconst interval = context.useInterval(() => {}, 1000);\n\n// New:\nimport { useInterval } from '@devvit/public-api';\n\nconst interval = useInterval(() => {}, 1000);\n```\n## Methods\n### useState()\n#### Call Signature\n**useState**(`initialState`): [`UseStateResult`](UseStateResult.md)<`boolean`\\>\nA hook for managing a state between Block renders. This is only available within a Block Component. Returns a tuple containing the current state and a function to update it.\n```ts\nconst [counter, setCounter] = useState(0);\nsetCounter(1); // counter = 1\nsetCounter((count) => count + 1); // counter = 2\n```\n##### Parameters\n###### initialState\n`boolean` | () => `boolean` | `Promise`<`boolean`\\>\n##### Returns\n[`UseStateResult`](UseStateResult.md)<`boolean`\\>\n##### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.\n```ts\n// Old:\nconst [counter, setCounter] = context.useState(0);\n\n// New:\nimport { useState } from '@devvit/public-api';\n\nconst [counter, setCounter] = useState(0);\n```\n#### Call Signature\n**useState**(`initialState`): [`UseStateResult`](UseStateResult.md)<`number`\\>\nA hook for managing a state between Block renders. This is only available within a Block Component. Returns a tuple containing the current state and a function to update it.\n```ts\nconst [counter, setCounter] = useState(0);\nsetCounter(1); // counter = 1\nsetCounter((count) => count + 1); // counter = 2\n```\n##### Parameters\n###### initialState\n`number` | () => `number` | `Promise`<`number`\\>\n##### Returns\n[`UseStateResult`](UseStateResult.md)<`number`\\>\n##### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.\n```ts\n// Old:\nconst [counter, setCounter] = context.useState(0);\n\n// New:\nimport { useState } from '@devvit/public-api';\n\nconst [counter, setCounter] = useState(0);\n```\n#### Call Signature",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Type Alias: ContextAPIClients",
        "Methods",
        "useState()",
        "Call Signature",
        "Deprecated"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Type Alias: ContextAPIClients, Methods, useState(), Call Signature, Parameters, initialState</path>\n**useState**(`initialState`): [`UseStateResult`](UseStateResult.md)<`string`\\>\nA hook for managing a state between Block renders. This is only available within a Block Component. Returns a tuple containing the current state and a function to update it.\n```ts\nconst [counter, setCounter] = useState(0);\nsetCounter(1); // counter = 1\nsetCounter((count) => count + 1); // counter = 2\n```\n##### Parameters\n###### initialState\n`string` | () => `string` | `Promise`<`string`\\>\n##### Returns\n[`UseStateResult`](UseStateResult.md)<`string`\\>\n##### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.\n```ts\n// Old:\nconst [counter, setCounter] = context.useState(0);\n\n// New:\nimport { useState } from '@devvit/public-api';\n\nconst [counter, setCounter] = useState(0);\n```\n#### Call Signature\n**useState**<`S`\\>(`initialState`): [`UseStateResult`](UseStateResult.md)<`S`\\>\nA hook for managing a state between Block renders. This is only available within a Block Component. Returns a tuple containing the current state and a function to update it.\n```ts\nconst [counter, setCounter] = useState(0);\nsetCounter(1); // counter = 1\nsetCounter((count) => count + 1); // counter = 2\n```\n##### Type Parameters\n###### S\n`S` _extends_ `undefined` | `void` | [`JSONValue`](JSONValue.md)\n##### Parameters\n###### initialState\nA hook for managing a state between Block renders. This is only available within a Block Component. Returns a tuple containing the current state and a function to update it.\n```ts\nconst [counter, setCounter] = useState(0);\nsetCounter(1); // counter = 1\nsetCounter((count) => count + 1); // counter = 2\n```\n**Deprecated**\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading"
      ],
      "path": [
        "Type Alias: ContextAPIClients",
        "Methods",
        "useState()",
        "Call Signature",
        "Parameters",
        "initialState"
      ],
      "level": 4
    }
  },
  {
    "pageContent": "<path>Type Alias: ContextAPIClients, Methods, useState(), Call Signature, Deprecated</path>\n```ts\n// Old:\nconst [counter, setCounter] = context.useState(0);\n\n// New:\nimport { useState } from '@devvit/public-api';\n\nconst [counter, setCounter] = useState(0);\n```\n`S` | () => `S` | `Promise`<`S`\\>\n##### Returns\n[`UseStateResult`](UseStateResult.md)<`S`\\>\n##### Deprecated\nUsing hooks from context is deprecated and will be removed in a future release. Import and use hooks directly from the public-api.\n```ts\n// Old:\nconst [counter, setCounter] = context.useState(0);\n\n// New:\nimport { useState } from '@devvit/public-api';\n\nconst [counter, setCounter] = useState(0);\n```",
    "metadata": {
      "type": [
        "code",
        "text",
        "heading"
      ],
      "path": [
        "Type Alias: ContextAPIClients",
        "Methods",
        "useState()",
        "Call Signature",
        "Deprecated"
      ],
      "level": 5
    }
  }
]